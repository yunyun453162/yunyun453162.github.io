<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->


IOS的视图组织呈现方式主要有三种:UITabbarViewController,UINavigationController,模态视图。

    我们的应用很多时候在要在三种方式方间来回切换，系统虽然提供了默认的动画，
    但这种千篇一律的动画效果很难给用户耳目一新的感觉，帮助我们从海量app中脱颖而出。
    在IOS7之前我们只能用addsubView的方式来自己实现转场切换效果。
    幸运的是，IOS7后苹果也给开发者留下了定制的空间－转场动画。

在开始做动画前，我们需要了解一些相关的知识，这些都是在ios7后才有的接口。

##转场代理


在转场动画中我们可能会用到以下几个代理：UIViewControllerContextTransitioning、UIViewControllerAnimatedTransitioning、UIViewControllerInteractiveTransitioning、UIViewControllerTransitioningDelegate，在下面我们来一一分析。

    转场动画相关的代理都在  UIKit/UIViewControllerTransitionCoordinator.h 中。

###1. UIViewControllerContextTransitioning
  这个代理提供动画执行涉及的信息，不能在自己的类中实现它，也不能新建一个类来实现接口。实现该代理的对象由UIKit在运行过程中提供，开发者可以获取到动画容器view,开始的view,新的view...我们可以把实现这个协议的对像称之为动画上下文。我们可以在动画控制器中接收回调来获取动画上下文，通过它我们可以知道谁要消失，谁要出现，然后自己实现切换动画，完了用completeTransition:来通知上下文动画完成。

获取回调:  

    //这个是普通转场动画代理接口
    -(void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext;
    - (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning>)transitionContext;

    //这个是交互式转场动画代理
    - (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning>)transitionContext;

###2. UIViewControllerAnimatedTransitioning
实现该协议的类可以称之为动画控制器。  
在视图切换时实现UIViewControllerTransitioningDelegate的类中传给UIKit，UIKit会用它来控制动画的进行。
它主要有如下两个方法：  

    // synchronize with the main animation. 
    - (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning>)transitionContext;


    // This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.
    - (void)animateTransition:(id <UIViewControllerContextTransitioning>)transitionContext;

方法一 是告之UIKit自定义动画的执行时间。  
方法二 是获取动画上下文。  
该控制器可以处理简单的非交互式动画，而交互式动画则该实现下面的协议。

###3. UIViewControllerInteractiveTransitioning  

IOS7后面有个非常酷的功能，就是侧滑返回上一页。而这个功能的实现就和这个代理息息相关了。
主要接口：  
      
    @protocol UIViewControllerInteractiveTransitioning <NSObject>
    - (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning>)transitionContext;

    @optional
    - (CGFloat)completionSpeed;
    - (UIViewAnimationCurve)completionCurve;

    @end
这两个接口提供的信息和上面的协议基本相同，不同的是你需要在实现类中添加手势和对手势进行处理。

普通动画控制器和交互式动画控制器都要获取到动画上下文中的信息，都需要在动画结束后手动调用completeTransition，不同的地方在于，交互式动画有动画进度，这就意味着随意用户手势的变化可以取消转换。
交互式动画比普通动画需要多调用以下接口：

    //更新动画进度
    [_context updateInteractiveTransition:percent];
    //取消或完成交互
    [_context cancelInteractiveTransition]/[_context finishInteractiveTransition];
    //完成或取消切换
     [_context completeTransition:YES/NO];
    
###4.UIViewControllerTransitioningDelegate

看看下面的接口，便明白这个代理是为了模态视图切换而新加的。NavigagtionController有UINavigationControllerDelegate来方便我们传入自定义的动画控制器，而模态视图需要通过以下的接口来传入。

    @protocol UIViewControllerTransitioningDelegate <NSObject>

    @optional
    - (id <UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;

    - (id <UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed;

    - (id <UIViewControllerInteractiveTransitioning>)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning>)animator;

    - (id <UIViewControllerInteractiveTransitioning>)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning>)animator;

    - (UIPresentationController *)presentationControllerForPresentedViewController:(UIViewController *)presented presentingViewController:(UIViewController *)presenting sourceViewController:(UIViewController *)source NS_AVAILABLE_IOS(8_0);

    @end

UITabBarControllerDelegate，UINavigationControllerDelegate和UIViewControllerTransitioningDelegate的作用是相似的，都可以用来传入动画控制器，以实现自定义的转场动画效果，这里就不再多言了。总之通过它们几个代理，我们可以传入自定义的动画控制器给UIKit。


##UINavigationController自定义动画
我们选上面第5条中的UINavigationController来做一个实战。大致分以下几步：

1. 新建一个master-detail项目；
2. 新建一个动画控制器，导入UIKit,遵守UIViewControllerAnimatedTransitioning协议；

        #import <Foundation/Foundation.h>
        #import <UIKit/UIKit.h>

        @interface AnimationController : NSObject<UIViewControllerAnimatedTransitioning>

        @end
3. masterViewController导入动画控制器头文件，遵守并实现UINavigationControllerDelegate协议，并实例化一个动画控制器对像，通过代理传给UIKit；

         //首先在viewDidLoad中将NavigationController的代理设为自己(masterViewController)
        self.navigationController.delegate = self;

        //然后传入动画控制器
        - (id <UIViewControllerAnimatedTransitioning>)navigationController:(UINavigationController *)navigationController
                                   animationControllerForOperation:(UINavigationControllerOperation)operation
                                                fromViewController:(UIViewController *)fromVC
                                                  toViewController:(UIViewController *)toVC
        {
            //我们只处理pop返回动画
            if(UINavigationControllerOperationPop == operation)
            {
                return [[AnimationController alloc] init];
            }
            return nil;
        }

4. 回到我们的动画控制器中去实现我们的动画效果；
下面是我从一个开源项目中copy过来的动画效果：

        -(void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {
            //Get references to the view hierarchy
            UIView *containerView = [transitionContext containerView];
            UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
            UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];
    
            //Insert 'to' view into the hierarchy，不加入的话就容器中就没有这个视图哦，那就看不到它的动画了。
            [containerView insertSubview:toViewController.view belowSubview:fromViewController.view];
    
            //90 degree transform away from the user
            CATransform3D t = CATransform3DIdentity;
            t = CATransform3DRotate(t, M_PI / 2.0, 0.0, 1.0, 0.0);
            t.m34 = 1.0 / -2000;
    
            //Set anchor points for the views
            [self setAnchorPoint:CGPointMake(0.0, 0.5) forView:toViewController.view];
            [self setAnchorPoint:CGPointMake(1.0, 0.5) forView:fromViewController.view];
    
            //Set appropriate z indexes
            fromViewController.view.layer.zPosition = 2.0;
            toViewController.view.layer.zPosition = 1.0;
    
            //Apply full transform to the 'to' view to start out with
            toViewController.view.layer.transform = t;
    
            //Animate the transition, applying transform to 'from' view and removing it from 'to' view
            [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{
            fromViewController.view.layer.transform = t;
             toViewController.view.layer.transform = CATransform3DIdentity;
            } completion:^(BOOL finished) {
                //Reset z indexes (otherwise this will affect other transitions)
                fromViewController.view.layer.zPosition = 0.0;
                toViewController.view.layer.zPosition = 0.0;
        
                [transitionContext completeTransition:YES];
            }];
            }

        -(NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {
            return 0.5;
        }

             #pragma mark - Helper Methods

        - (void)setAnchorPoint:(CGPoint)anchorPoint forView:(UIView *)view {
            CGPoint oldOrigin = view.frame.origin;
            view.layer.anchorPoint = anchorPoint;
            CGPoint newOrigin = view.frame.origin;
    
           CGPoint transition;
           transition.x = newOrigin.x - oldOrigin.x;
           transition.y = oldOrigin.y - oldOrigin.y;
    
           view.center = CGPointMake (view.center.x - transition.x, view.center.y - transition.y);
        }


完成上述步骤我们就自定义实现了一个navigationController的一个pop动画。如果不同的页面有很多不同动画效果的话我们可以建一个管理类来做nav代理，根据fromviewcontroller和toViewController来分别传入不同的动画控制器。

整个定制的过程非常简单，tabbarcontroller和模态视图的步骤也是类似的，这里就不一一列举了。
![网上的一个简单的归纳图片](http://cdn.cocimg.com/cms/uploads/allimg/131224/4673_131224115044_1.jpg)


<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>IOS的视图组织呈现方式主要有三种:UITabbarViewController,UINavigationController,模态视图。</p>

<pre><code>我们的应用很多时候在要在三种方式方间来回切换，系统虽然提供了默认的动画，
但这种千篇一律的动画效果很难给用户耳目一新的感觉，帮助我们从海量app中脱颖而出。
在IOS7之前我们只能用addsubView的方式来自己实现转场切换效果。
幸运的是，IOS7后苹果也给开发者留下了定制的空间－转场动画。
</code></pre>

<p>在开始做动画前，我们需要了解一些相关的知识，这些都是在ios7后才有的接口。</p>

<h2 id="">转场代理</h2>

<p>在转场动画中我们可能会用到以下几个代理：UIViewControllerContextTransitioning、UIViewControllerAnimatedTransitioning、UIViewControllerInteractiveTransitioning、UIViewControllerTransitioningDelegate，在下面我们来一一分析。</p>

<pre><code>转场动画相关的代理都在  UIKit/UIViewControllerTransitionCoordinator.h 中。
</code></pre>

<h3 id="1uiviewcontrollercontexttransitioning">1. UIViewControllerContextTransitioning</h3>

<p>这个代理提供动画执行涉及的信息，不能在自己的类中实现它，也不能新建一个类来实现接口。实现该代理的对象由UIKit在运行过程中提供，开发者可以获取到动画容器view,开始的view,新的view...我们可以把实现这个协议的对像称之为动画上下文。我们可以在动画控制器中接收回调来获取动画上下文，通过它我们可以知道谁要消失，谁要出现，然后自己实现切换动画，完了用completeTransition:来通知上下文动画完成。</p>

<p>获取回调:  </p>

<pre><code>//这个是普通转场动画代理接口
-(void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext;
- (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;

//这个是交互式转场动画代理
- (void)startInteractiveTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;
</code></pre>

<h3 id="2uiviewcontrolleranimatedtransitioning">2. UIViewControllerAnimatedTransitioning</h3>

<p>实现该协议的类可以称之为动画控制器。 <br>
在视图切换时实现UIViewControllerTransitioningDelegate的类中传给UIKit，UIKit会用它来控制动画的进行。
它主要有如下两个方法：  </p>

<pre><code>// synchronize with the main animation. 
- (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;


// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.
- (void)animateTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;
</code></pre>

<p>方法一 是告之UIKit自定义动画的执行时间。 <br>
方法二 是获取动画上下文。 <br>
该控制器可以处理简单的非交互式动画，而交互式动画则该实现下面的协议。</p>

<h3 id="3uiviewcontrollerinteractivetransitioning">3. UIViewControllerInteractiveTransitioning</h3>

<p>IOS7后面有个非常酷的功能，就是侧滑返回上一页。而这个功能的实现就和这个代理息息相关了。
主要接口：  </p>

<pre><code>@protocol UIViewControllerInteractiveTransitioning &lt;NSObject&gt;
- (void)startInteractiveTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;

@optional
- (CGFloat)completionSpeed;
- (UIViewAnimationCurve)completionCurve;

@end
</code></pre>

<p>这两个接口提供的信息和上面的协议基本相同，不同的是你需要在实现类中添加手势和对手势进行处理。</p>

<p>普通动画控制器和交互式动画控制器都要获取到动画上下文中的信息，都需要在动画结束后手动调用completeTransition，不同的地方在于，交互式动画有动画进度，这就意味着随意用户手势的变化可以取消转换。
交互式动画比普通动画需要多调用以下接口：</p>

<pre><code>//更新动画进度
[_context updateInteractiveTransition:percent];
//取消或完成交互
[_context cancelInteractiveTransition]/[_context finishInteractiveTransition];
//完成或取消切换
 [_context completeTransition:YES/NO];
</code></pre>

<h3 id="4uiviewcontrollertransitioningdelegate">4.UIViewControllerTransitioningDelegate</h3>

<p>看看下面的接口，便明白这个代理是为了模态视图切换而新加的。NavigagtionController有UINavigationControllerDelegate来方便我们传入自定义的动画控制器，而模态视图需要通过以下的接口来传入。</p>

<pre><code>@protocol UIViewControllerTransitioningDelegate &lt;NSObject&gt;

@optional
- (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;

- (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed;

- (id &lt;UIViewControllerInteractiveTransitioning&gt;)interactionControllerForPresentation:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator;

- (id &lt;UIViewControllerInteractiveTransitioning&gt;)interactionControllerForDismissal:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator;

- (UIPresentationController *)presentationControllerForPresentedViewController:(UIViewController *)presented presentingViewController:(UIViewController *)presenting sourceViewController:(UIViewController *)source NS_AVAILABLE_IOS(8_0);

@end
</code></pre>

<p>UITabBarControllerDelegate，UINavigationControllerDelegate和UIViewControllerTransitioningDelegate的作用是相似的，都可以用来传入动画控制器，以实现自定义的转场动画效果，这里就不再多言了。总之通过它们几个代理，我们可以传入自定义的动画控制器给UIKit。</p>

<h2 id="uinavigationcontroller">UINavigationController自定义动画</h2>

<p>我们选上面第5条中的UINavigationController来做一个实战。大致分以下几步：</p>

<ol>
<li>新建一个master-detail项目；</li>
<li><p>新建一个动画控制器，导入UIKit,遵守UIViewControllerAnimatedTransitioning协议；</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;UIKit/UIKit.h&gt;


@interface AnimationController : NSObject&lt;UIViewControllerAnimatedTransitioning&gt;


@end
</code></pre></li>
<li><p>masterViewController导入动画控制器头文件，遵守并实现UINavigationControllerDelegate协议，并实例化一个动画控制器对像，通过代理传给UIKit；</p>

<pre><code> //首先在viewDidLoad中将NavigationController的代理设为自己(masterViewController)
self.navigationController.delegate = self;


//然后传入动画控制器
- (id &lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController
                           animationControllerForOperation:(UINavigationControllerOperation)operation
                                        fromViewController:(UIViewController *)fromVC
                                          toViewController:(UIViewController *)toVC
{
    //我们只处理pop返回动画
    if(UINavigationControllerOperationPop == operation)
    {
        return [[AnimationController alloc] init];
    }
    return nil;
}
</code></pre></li>
<li><p>回到我们的动画控制器中去实现我们的动画效果；
下面是我从一个开源项目中copy过来的动画效果：</p>

<pre><code>-(void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {
    //Get references to the view hierarchy
    UIView *containerView = [transitionContext containerView];
    UIViewController *fromViewController = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIViewController *toViewController = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];


<pre><code>//Insert 'to' view into the hierarchy，不加入的话就容器中就没有这个视图哦，那就看不到它的动画了。
[containerView insertSubview:toViewController.view belowSubview:fromViewController.view];


//90 degree transform away from the user
CATransform3D t = CATransform3DIdentity;
t = CATransform3DRotate(t, M_PI / 2.0, 0.0, 1.0, 0.0);
t.m34 = 1.0 / -2000;


//Set anchor points for the views
[self setAnchorPoint:CGPointMake(0.0, 0.5) forView:toViewController.view];
[self setAnchorPoint:CGPointMake(1.0, 0.5) forView:fromViewController.view];


//Set appropriate z indexes
fromViewController.view.layer.zPosition = 2.0;
toViewController.view.layer.zPosition = 1.0;


//Apply full transform to the 'to' view to start out with
toViewController.view.layer.transform = t;


//Animate the transition, applying transform to 'from' view and removing it from 'to' view
[UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{
fromViewController.view.layer.transform = t;
 toViewController.view.layer.transform = CATransform3DIdentity;
} completion:^(BOOL finished) {
    //Reset z indexes (otherwise this will affect other transitions)
    fromViewController.view.layer.zPosition = 0.0;
    toViewController.view.layer.zPosition = 0.0;


    [transitionContext completeTransition:YES];
}];
}
</code></pre>

-(NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {
    return 0.5;
}


<pre><code> #pragma mark - Helper Methods
</code></pre>

- (void)setAnchorPoint:(CGPoint)anchorPoint forView:(UIView *)view {
    CGPoint oldOrigin = view.frame.origin;
    view.layer.anchorPoint = anchorPoint;
    CGPoint newOrigin = view.frame.origin;


   CGPoint transition;
   transition.x = newOrigin.x - oldOrigin.x;
   transition.y = oldOrigin.y - oldOrigin.y;


   view.center = CGPointMake (view.center.x - transition.x, view.center.y - transition.y);
}
</code></pre></li>
</ol>

<p>完成上述步骤我们就自定义实现了一个navigationController的一个pop动画。如果不同的页面有很多不同动画效果的话我们可以建一个管理类来做nav代理，根据fromviewcontroller和toViewController来分别传入不同的动画控制器。</p>

<p>整个定制的过程非常简单，tabbarcontroller和模态视图的步骤也是类似的，这里就不一一列举了。
<img src="http://cdn.cocimg.com/cms/uploads/allimg/131224/4673_131224115044_1.jpg" alt="网上的一个简单的归纳图片" title=""></p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "IOS转场动画.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
