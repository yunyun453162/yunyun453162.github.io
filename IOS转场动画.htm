<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->


IOS的视图组织呈现方式有三种:UITabbarViewController,UINavigationController,模态视图。

    我们的应用很多时候在要在三种方式方间来回切换，系统虽然提供了默认的动画，但这种千篇一律的动画效果很难给用户耳目一新的感觉，帮助我们从百万app中脱颖而出。幸运的是，苹果也给开发者留下了定制的空间－转场动画。转场动画相关的代理都在  UIKit/UIViewControllerTransitionCoordinator.h 中。


##转场代理
在转场动画中我们可能会用到以下几个代理：UIViewControllerContextTransitioning、UIViewControllerAnimatedTransitioning、UIViewControllerInteractiveTransitioning、UIViewControllerTransitioningDelegate，在下面我们来一一分析。

###1. UIViewControllerContextTransitioning
  这个代理提供动画执行涉及的信息，不能在自己的类中实现它，也不能新建一个类来实现接口。实现该代理的对象由UIKit在运行过程中提供，开发者可以获取到动画容器view,开始的view,新的view...我们可以把实现这个协议的对像称之为动画上下文。通过它我们可以知道谁要消失，谁要出现，然后自己实现切换动画，完了用completeTransition:来通知上下文动画完成。

###2. UIViewControllerAnimatedTransitioning
实现该协议的类可以称之为动画控制器。  
在视图切换时实现UIViewControllerTransitioningDelegate的类中传给UIKit，UIKit会用它来控制动画的进行。
它主要有如下两个方法：  

    // synchronize with the main animation. 
    - (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning>)transitionContext;


    // This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.
    - (void)animateTransition:(id <UIViewControllerContextTransitioning>)transitionContext;

方法一 是告之UIKit自定义动画的执行时间。  
方法二 是获取动画上下文。  
该控制器可以处理简单的非交互式动画，而交互式动画则该实现下面的协议。

###3. UIViewControllerInteractiveTransitioning  

IOS7后面有个非常酷的功能，就是侧滑返回上一页。而这个功能的实现就和这个代理息息相关了。



###4.UIViewControllerTransitioningDelegate




<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>IOS的视图组织呈现方式有三种:UITabbarViewController,UINavigationController,模态视图。</p>

<pre><code>我们的应用很多时候在要在三种方式方间来回切换，系统虽然提供了默认的动画，但这种千篇一律的动画效果很难给用户耳目一新的感觉，帮助我们从百万app中脱颖而出。幸运的是，苹果也给开发者留下了定制的空间－转场动画。转场动画相关的代理都在  UIKit/UIViewControllerTransitionCoordinator.h 中。
</code></pre>

<h2 id="">转场代理</h2>

<p>在转场动画中我们可能会用到以下几个代理：UIViewControllerContextTransitioning、UIViewControllerAnimatedTransitioning、UIViewControllerInteractiveTransitioning、UIViewControllerTransitioningDelegate，在下面我们来一一分析。</p>

<h3 id="1uiviewcontrollercontexttransitioning">1. UIViewControllerContextTransitioning</h3>

<p>这个代理提供动画执行涉及的信息，不能在自己的类中实现它，也不能新建一个类来实现接口。实现该代理的对象由UIKit在运行过程中提供，开发者可以获取到动画容器view,开始的view,新的view...我们可以把实现这个协议的对像称之为动画上下文。通过它我们可以知道谁要消失，谁要出现，然后自己实现切换动画，完了用completeTransition:来通知上下文动画完成。</p>

<h3 id="2uiviewcontrolleranimatedtransitioning">2. UIViewControllerAnimatedTransitioning</h3>

<p>实现该协议的类可以称之为动画控制器。 <br>
在视图切换时实现UIViewControllerTransitioningDelegate的类中传给UIKit，UIKit会用它来控制动画的进行。
它主要有如下两个方法：  </p>

<pre><code>// synchronize with the main animation. 
- (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;


// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.
- (void)animateTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext;
</code></pre>

<p>方法一 是告之UIKit自定义动画的执行时间。 <br>
方法二 是获取动画上下文。 <br>
该控制器可以处理简单的非交互式动画，而交互式动画则该实现下面的协议。</p>

<h3 id="3uiviewcontrollerinteractivetransitioning">3. UIViewControllerInteractiveTransitioning</h3>

<p>IOS7后面有个非常酷的功能，就是侧滑返回上一页。而这个功能的实现就和这个代理息息相关了。</p>

<h3 id="4uiviewcontrollertransitioningdelegate">4.UIViewControllerTransitioningDelegate</h3>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "IOS转场动画.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
