<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->

##NSOperation
NSThread在使用时我们还要负责启动和管理，如果这样的工作比较多，我们就不得不做了很多重复的无意义的工作，而且增加了代码耦合性。那么我们就要想办法来封装一个类，在它里面去开线程和管理，更进一步我们只要传递target，方法，和参数给它，其它操作用同一个实现，然后只要一个结果就好(甚至我不需要知道结果)--NSOperation就这是这样一个抽象类。

说到`抽象类`，在OC中没有专门表示抽象的关键字，但我们还是可以用到这种思想－`定义一些方法，然而并不去真正实现`。那我们就要继承这个类，然后在自己的类中去实现它们，这对扩展是很有用的。系统提供了NSInvocationOperation  和 NSBlockOperation 给我们使用，它们都继承于NSOperation，并且仅对外提供了简单的接口。我们来看一下它的头文件：  

    @interface NSOperation : NSObject {
    @private
        id _private;
        int32_t _private1;
    #if __LP64__
        int32_t _private1b;
    #endif
    }

    @property (readonly, getter=isCancelled) BOOL cancelled;
    @property (readonly, getter=isExecuting) BOOL executing;
    @property (readonly, getter=isFinished) BOOL finished;
    @property (readonly, getter=isConcurrent) BOOL concurrent; // To be deprecated; use and override 'asynchronous' below
    @property (readonly, getter=isAsynchronous) BOOL asynchronous NS_AVAILABLE(10_8, 7_0);
    @property (readonly, getter=isReady) BOOL ready;
    @property (readonly, copy) NSArray *dependencies;

    typedef NS_ENUM(NSInteger, NSOperationQueuePriority) {
        NSOperationQueuePriorityVeryLow = -8L,
        NSOperationQueuePriorityLow = -4L,
        NSOperationQueuePriorityNormal = 0,
        NSOperationQueuePriorityHigh = 4,
        NSOperationQueuePriorityVeryHigh = 8
    };

    @property NSOperationQueuePriority queuePriority;
    @property (copy) void (^completionBlock)(void) NS_AVAILABLE(10_6, 4_0);
    @property double threadPriority NS_DEPRECATED(10_6, 10_10, 4_0, 8_0);
    @property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);
    @property (copy) NSString *name NS_AVAILABLE(10_10, 8_0);

    - (void)start;
    - (void)main;
    - (void)cancel;
    - (void)waitUntilFinished NS_AVAILABLE(10_6, 4_0);
    - (void)addDependency:(NSOperation *)op;
    - (void)removeDependency:(NSOperation *)op;

    @end

我把它的属性和方法分成了两块以便浏览，如果你看过NSThread的文档，你就会觉得很眼熟，它们有太多相似的地方。如果我们要启动一个operation,就可以实现并手动调用start/main，而如果我们不想手动启动，可以把它加入到一个operationQueue中，它会择机通过start来启动这个operation。如果我们想在操作结束后做一些工作，可以通过传入`@property (copy) void (^completionBlock)(void)`这个属性去处理。`不过要注意的是，我们手动启动的话我们就要在start里面自己实例化一个新线程，如果isReady为NO或者内存等资源不够，它会抛出一个异常`，而交给queue,系统则会根据并发数开启一个线程池，把任务交给成功开启的可复用的线程去逐个处理。

比较有意思的是Dependency，如果一个操作依赖于其它的操作，那么可以addDependency进来，它会等其它操作完成(cancel也算)后才会开始真正的工作。opertation 执行的顺序大致是isReady?-> start->isReady?->Excuting->finish。我们当然也可以在start里面指定自己的线程来执行每一个操作，那么queue的线程只管`异步`调度我们的任务就好，并且它是为并发而生，所以它被系统定义为线程安全的，我们自己实现的子类需要注意这个问题，确保所有属性或方法是线程安全的。所有的 operation 都支持以下特性：

- 支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；

- 支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用；
- 支持通过 KVO 来观察 operation 执行状态的变化；
- 支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；
- 支持取消操作，可以允许我们停止正在执行的 operation 。

###并发与同步
一般来讲，把operation加入到系统的queue中使用的是异步调用，这样我们就不用担心当阻塞当前的调用线程。  
1. 同步 如果我们想要子类化一个operation，并使用同步调用，我们只需要实现一个方法`main`。  
2. 异步 异步至少要实现：  
  - start
  - asynchronous
  - executing
  - finish等方法，并且你要自己维护操作的执行状态。
For additional information and guidance on how to define concurrent operations, see [Concurrency Programming Guide](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091)。

<table class="graybox" border="0" cellspacing="0" cellpadding="5">
    <caption class="tablecaption"><strong class="caption-number">Table 1</strong>Key paths for operation object states</caption>
    <thead>
        <tr>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">
  Key Path
</p></th>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">
  Description
</p></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isReady</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isReady</code> key path lets clients know when an operation is ready to execute. The <code class="code-voice x-api-no-link">ready</code> property contains the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code> when the operation is ready to execute now or <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code> if there are still unfinished operations on which it is dependent.
</p><p class="para">
  In most cases, you do not have to manage the state of this key path yourself. If the readiness of your operations is determined by factors other than dependent operations, however—such as by some external condition in your program—you can provide your own implementation of the <code class="code-voice x-api-no-link">ready</code> property and track your operation’s readiness yourself. It is often simpler though just to create operation objects only when your external state allows it.
</p><p class="para">
  In OS X v10.6 and later, if you cancel an operation while it is waiting on the completion of one or more dependent operations, those dependencies are thereafter ignored and the value of this property is updated to reflect that it is now ready to run. This behavior gives an operation queue the chance to flush cancelled operations out of its queue more quickly. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isExecuting</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isExecuting</code> key path lets clients know whether the operation is actively working on its assigned task. The <code class="code-voice x-api-no-link">executing</code> property must report the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code> if the operation is working on its task or <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code> if it is not. 
</p><p class="para">
  If you replace the <code class="code-voice x-api-no-link">start</code> method of your operation object, you must also replace the <code class="code-voice x-api-no-link">executing</code> property and generate KVO notifications when the execution state of your operation changes. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isFinished</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isFinished</code> key path lets clients know that an operation finished its task successfully or was cancelled and is exiting. An operation object does not clear a dependency until the value at the <code class="code-voice">isFinished</code> key path changes to <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code>. Similarly, an operation queue does not dequeue an operation until the <code class="code-voice x-api-no-link">finished</code> property contains the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code>. Thus, marking operations as finished is critical to keeping queues from backing up with in-progress or cancelled operations. 
</p><p class="para">
  If you replace the <code class="code-voice x-api-no-link">start</code> method or your operation object, you must also replace the <code class="code-voice x-api-no-link">finished</code> property and generate KVO notifications when the operation finishes executing or is cancelled. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isCancelled</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isCancelled</code> key path lets clients know that the cancellation of an operation was requested. Support for cancellation is voluntary but encouraged and your own code should not have to send KVO notifications for this key path. The handling of cancellation notices in an operation is described in more detail in <span class="x-name"><a href="#//apple_ref/doc/uid/TP40004591-RH2-SW18" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40004591-RH2-SW18">Responding to the Cancel Command</a></span>. 
</p></td>
        </tr>
    </tbody>
  </table>


##NSOperationQueue
NSOperationQueue 是调度我们封装好的操作的队列，它有点类似于一个指挥交通的交警，负责指挥调度不同方向车辆的行驶顺序，维持执行秩序。NSOperationQueue有以下特点：  

- 所有`add`到NSOperationQueue中的NSOperation，会被NSOperationQueue在适当时机放权执行，并一直持有到操作结束。
- 移除`add`到queue里面的operation，要么等operation真正执行完成，要么手动`cancel`。
- operation的依赖仍然有效，它会等到`isReady`为`真`时才开始执行，但是比其它ready状态的operation有更高的优先级。
- cancel 正在执行中的操作会尽快中止执行，而在等待状态的操作则会进入到start或main中去检测状态再退出执行。
- 加入队列的操作都将进入GCD中的单独线程中调用，不论它们被指定为同步还是异步操作。
- 队列中的操作优先级高的先执行，优先级相同按加入时间早的先执行。
- 操作执行顺序并不总是一定的，如果你在确定的执行顺序，可以使用操作的依赖属性。


<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h2 id="nsoperation">NSOperation</h2>

<p>NSThread在使用时我们还要负责启动和管理，如果这样的工作比较多，我们就不得不做了很多重复的无意义的工作，而且增加了代码耦合性。那么我们就要想办法来封装一个类，在它里面去开线程和管理，更进一步我们只要传递target，方法，和参数给它，其它操作用同一个实现，然后只要一个结果就好(甚至我不需要知道结果)--NSOperation就这是这样一个抽象类。</p>

<p>说到<code>抽象类</code>，在OC中没有专门表示抽象的关键字，但我们还是可以用到这种思想－<code>定义一些方法，然而并不去真正实现</code>。那我们就要继承这个类，然后在自己的类中去实现它们，这对扩展是很有用的。系统提供了NSInvocationOperation  和 NSBlockOperation 给我们使用，它们都继承于NSOperation，并且仅对外提供了简单的接口。我们来看一下它的头文件：  </p>

<pre><code>@interface NSOperation : NSObject {
@private
    id _private;
    int32_t _private1;
#if __LP64__
    int32_t _private1b;
#endif
}

@property (readonly, getter=isCancelled) BOOL cancelled;
@property (readonly, getter=isExecuting) BOOL executing;
@property (readonly, getter=isFinished) BOOL finished;
@property (readonly, getter=isConcurrent) BOOL concurrent; // To be deprecated; use and override 'asynchronous' below
@property (readonly, getter=isAsynchronous) BOOL asynchronous NS_AVAILABLE(10_8, 7_0);
@property (readonly, getter=isReady) BOOL ready;
@property (readonly, copy) NSArray *dependencies;

typedef NS_ENUM(NSInteger, NSOperationQueuePriority) {
    NSOperationQueuePriorityVeryLow = -8L,
    NSOperationQueuePriorityLow = -4L,
    NSOperationQueuePriorityNormal = 0,
    NSOperationQueuePriorityHigh = 4,
    NSOperationQueuePriorityVeryHigh = 8
};

@property NSOperationQueuePriority queuePriority;
@property (copy) void (^completionBlock)(void) NS_AVAILABLE(10_6, 4_0);
@property double threadPriority NS_DEPRECATED(10_6, 10_10, 4_0, 8_0);
@property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);
@property (copy) NSString *name NS_AVAILABLE(10_10, 8_0);

- (void)start;
- (void)main;
- (void)cancel;
- (void)waitUntilFinished NS_AVAILABLE(10_6, 4_0);
- (void)addDependency:(NSOperation *)op;
- (void)removeDependency:(NSOperation *)op;

@end
</code></pre>

<p>我把它的属性和方法分成了两块以便浏览，如果你看过NSThread的文档，你就会觉得很眼熟，它们有太多相似的地方。如果我们要启动一个operation,就可以实现并手动调用start/main，而如果我们不想手动启动，可以把它加入到一个operationQueue中，它会择机通过start来启动这个operation。如果我们想在操作结束后做一些工作，可以通过传入<code>@property (copy) void (^completionBlock)(void)</code>这个属性去处理。<code>不过要注意的是，我们手动启动的话我们就要在start里面自己实例化一个新线程，如果isReady为NO或者内存等资源不够，它会抛出一个异常</code>，而交给queue,系统则会根据并发数开启一个线程池，把任务交给成功开启的可复用的线程去逐个处理。</p>

<p>比较有意思的是Dependency，如果一个操作依赖于其它的操作，那么可以addDependency进来，它会等其它操作完成(cancel也算)后才会开始真正的工作。opertation 执行的顺序大致是isReady?-&gt; start-&gt;isReady?-&gt;Excuting-&gt;finish。我们当然也可以在start里面指定自己的线程来执行每一个操作，那么queue的线程只管<code>异步</code>调度我们的任务就好，并且它是为并发而生，所以它被系统定义为线程安全的，我们自己实现的子类需要注意这个问题，确保所有属性或方法是线程安全的。所有的 operation 都支持以下特性：</p>

<ul>
<li><p>支持在 operation 之间建立依赖关系，只有当一个 operation 所依赖的所有 operation 都执行完成时，这个 operation 才能开始执行；</p></li>
<li><p>支持一个可选的 completion block ，这个 block 将会在 operation 的主任务执行完成时被调用；</p></li>
<li>支持通过 KVO 来观察 operation 执行状态的变化；</li>
<li>支持设置执行的优先级，从而影响 operation 之间的相对执行顺序；</li>
<li>支持取消操作，可以允许我们停止正在执行的 operation 。</li>
</ul>

<h3 id="">并发与同步</h3>

<p>一般来讲，把operation加入到系统的queue中使用的是异步调用，这样我们就不用担心当阻塞当前的调用线程。 <br>
1. 同步 如果我们想要子类化一个operation，并使用同步调用，我们只需要实现一个方法<code>main</code>。 <br>
2. 异步 异步至少要实现： <br>
  - start
  - asynchronous
  - executing
  - finish等方法，并且你要自己维护操作的执行状态。
For additional information and guidance on how to define concurrent operations, see <a href="https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091">Concurrency Programming Guide</a>。</p>

<table class="graybox" border="0" cellspacing="0" cellpadding="5">
    <caption class="tablecaption"><strong class="caption-number">Table 1</strong>Key paths for operation object states</caption>
    <thead>
        <tr>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">
  Key Path
</p></th>
            <th scope="col" class="TableHeading_TableRow_TableCell"><p class="para">
  Description
</p></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isReady</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isReady</code> key path lets clients know when an operation is ready to execute. The <code class="code-voice x-api-no-link">ready</code> property contains the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code> when the operation is ready to execute now or <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code> if there are still unfinished operations on which it is dependent.
</p><p class="para">
  In most cases, you do not have to manage the state of this key path yourself. If the readiness of your operations is determined by factors other than dependent operations, however—such as by some external condition in your program—you can provide your own implementation of the <code class="code-voice x-api-no-link">ready</code> property and track your operation’s readiness yourself. It is often simpler though just to create operation objects only when your external state allows it.
</p><p class="para">
  In OS X v10.6 and later, if you cancel an operation while it is waiting on the completion of one or more dependent operations, those dependencies are thereafter ignored and the value of this property is updated to reflect that it is now ready to run. This behavior gives an operation queue the chance to flush cancelled operations out of its queue more quickly. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isExecuting</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isExecuting</code> key path lets clients know whether the operation is actively working on its assigned task. The <code class="code-voice x-api-no-link">executing</code> property must report the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code> if the operation is working on its task or <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code> if it is not. 
</p><p class="para">
  If you replace the <code class="code-voice x-api-no-link">start</code> method of your operation object, you must also replace the <code class="code-voice x-api-no-link">executing</code> property and generate KVO notifications when the execution state of your operation changes. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isFinished</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isFinished</code> key path lets clients know that an operation finished its task successfully or was cancelled and is exiting. An operation object does not clear a dependency until the value at the <code class="code-voice">isFinished</code> key path changes to <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code>. Similarly, an operation queue does not dequeue an operation until the <code class="code-voice x-api-no-link">finished</code> property contains the value <code class="k-constant-name code-voice Objective-C">YES</code><code class="k-constant-name code-voice Swift">true</code>. Thus, marking operations as finished is critical to keeping queues from backing up with in-progress or cancelled operations. 
</p><p class="para">
  If you replace the <code class="code-voice x-api-no-link">start</code> method or your operation object, you must also replace the <code class="code-voice x-api-no-link">finished</code> property and generate KVO notifications when the operation finishes executing or is cancelled. 
</p></td>
        </tr>
        <tr>
            <td scope="row"><p class="para">
  <code class="code-voice">isCancelled</code>
</p></td>
            <td><p class="para">
  The <code class="code-voice">isCancelled</code> key path lets clients know that the cancellation of an operation was requested. Support for cancellation is voluntary but encouraged and your own code should not have to send KVO notifications for this key path. The handling of cancellation notices in an operation is described in more detail in <span class="x-name"><a href="#//apple_ref/doc/uid/TP40004591-RH2-SW18" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40004591-RH2-SW18">Responding to the Cancel Command</a></span>. 
</p></td>
        </tr>
    </tbody>
  </table>

<h2 id="nsoperationqueue">NSOperationQueue</h2>

<p>NSOperationQueue 是调度我们封装好的操作的队列，它有点类似于一个指挥交通的交警，负责指挥调度不同方向车辆的行驶顺序，维持执行秩序。NSOperationQueue有以下特点：  </p>

<ul>
<li>所有<code>add</code>到NSOperationQueue中的NSOperation，会被NSOperationQueue在适当时机放权执行，并一直持有到操作结束。</li>
<li>移除<code>add</code>到queue里面的operation，要么等operation真正执行完成，要么手动<code>cancel</code>。</li>
<li>operation的依赖仍然有效，它会等到<code>isReady</code>为<code>真</code>时才开始执行，但是比其它ready状态的operation有更高的优先级。</li>
<li>cancel 正在执行中的操作会尽快中止执行，而在等待状态的操作则会进入到start或main中去检测状态再退出执行。</li>
<li>加入队列的操作都将进入GCD中的单独线程中调用，不论它们被指定为同步还是异步操作。</li>
<li>队列中的操作优先级高的先执行，优先级相同按加入时间早的先执行。</li>
<li>操作执行顺序并不总是一定的，如果你在确定的执行顺序，可以使用操作的依赖属性。</li>
</ul>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "NSOperation.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
