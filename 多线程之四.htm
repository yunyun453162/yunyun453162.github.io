<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->

　  `GCD`全名叫Grand Central Dispatch－并行调度中心，它是Apple为了并发任务而专门开发的一套底层接口，集语法优化，runtime库，系统底层支持等诸多优势于一身，自动为应用平衡性能系统资源，不知甩了NThread几条街。

GCD使用block来作为执行体，它可以直接在调用的地方封装好一段代码，加强了关联性，并且block具有获取当前类的信息，省去了手动传递参数。  
 
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //执行一个后台操作
    do something at a background thread

    if (success) {
        dispatch_async(dispatch_get_main_queue(), ^{
           //回到主线程处理结果
           //do something on main thread after get the result

        });
    } else {
        NSLog(@"error： %@", error);
    }
    );

 就上面短短一些代码，我们就切换了两次线程，做了两次操作 ，没有传任何参数，也没有另写回调接口，操作和结果处理都在一块，这就是GCD带来的语法便利性。

##队列
GCD提供了一系列的C风格接口实现多线程的功能，而线程的实现则在底层封装，我们每个代码块都可视作一个任务，而暴露出来的则是以下几种任务调度队列(dispatch queue)：
--- -
1. 主队列main queue － 对应线程中的主线程，所有放在主队列中的代码块都将被分配在主线程中执行。获取方式 `dispatch_get_main_queue()`；

2. 并行队列 － 并行队列主要有两种，一种是系统一直运行在后台的，还有一种是自己生成的。

- 后台全局并发队列（global dispatch queue），通过`dispatch_get_global_queue(0, 0)`获取；它有两个参数，第一个是设置任务执行优先级，一般我们用`DISPATCH_QUEUE_PRIORITY_DEFAULT（值为0）`，还有一个是apple备用参数，传非0参数可能导致空指什异常。

- 用户自定并发队列(concurrent queue) － 通过`dispatch_queue_create("concurrent", DISPATCH_QUEUE_CONCURRENT)`来获取，第一个参数是Ｃ字符串，用来标识这个队列，第二个参数则是队列类型－并发 or 串行。
`DISPATCH_QUEUE_CONCURRENT` 表示并发队列，`DISPATCH_QUEUE_SERIAL`则表示串行队列，默认`(NULL)`为串行。

3. 串行队列（serial queue）－ 这个同样包含有两个，一个就是我们的主队列(main queue)，还有一个则是用户创建的队列。通过`dispatch_queue_create("concurrent", NULL)`来获取。

--- 
  需要注意的是因为它是基于Ｃ的，所以我们自己创建的队列需要手动来管理内存，在用完后调用`dispatch_release(queue)`释放它,所有的GCD对象都是如此。不论并发队列还是串行队列，在没有建立依赖的情况下，所有的任务都是IFIO的。不同的是，串行是一个任务执行完了才能执行下一个，而并行则只有要空闲资源，就会按序一个接一个开始执行，不用等它其它任务执行结束，顺序是不可预知的。

## 执行方式
1. 同步 (sync)－ 同步执行会让当前的调用线程处于等待状态，直到任务执行完成才继续。  

        例1

        - (void)syncExcute
        {
            dispatch_queue_t queue = dispatch_queue_create("my_queue", nil);
        
            dispatch_sync(queue, ^(void) {
            
                NSLog(@"wait for a moment!");
                sleep(3);
            });
            NSLog(@"I've been waiting for 3 seconds！");
        }
在这个例子中，当前线程等了3秒多后才打出log。这用在需要执行结果才能进入下一步的场景。需要注意的是，因为它会卡死线程，所以不要在主线程，主队列中去使用。

2. 异步(async) － 有时候任务比较重，为了不卡死当前的执行线程，我们就把这个任务放在其它后台线程中执行。其结果是当前线程代码继续执行，提交的任务会稍后被调度。  

        static  dispatch_queue_t excuteQueue = nil;
        - (void)asyncExcute
        {
            if(!excuteQueue)
                excuteQueue =  dispatch_queue_create("my_queue", nil);
            
            NSLog(@"Start a  task.");
            dispatch_async(excuteQueue, ^(void) {
                
                [self excuteMainTask];
            });
            NSLog(@"Do other thing!");
        }


        - (void)excuteMainTask
        {
            NSLog(@"Start excute main task.");
            sleep(3);
            NSLog(@"Main task fniish!");
        }
结果如下：  

        2015-09-16 17:32:22.455 testGCD[4667:143175] Start a  task.
        2015-09-16 17:32:22.456 testGCD[4667:143219] Start excute main task.
        2015-09-16 17:32:22.456 testGCD[4667:143175] Do other thing!
        2015-09-16 17:32:25.461 testGCD[4667:143219] Main task fniish!
上面的结果可以看出：我们虽然在mainTask中睡眠，但不影响调用的线程的执行。

3. 延后执行 － 有时候我们希望任务稍晚一些自动执行，就可以使用这个功能。  

        - (void)asyncExcute
        {
            if(!excuteQueue)
                excuteQueue =  dispatch_queue_create("my_queue", nil);
            
            NSLog(@"Start a  task after delay 2s.");
            [self excuteDelay];
            NSLog(@"Do other thing!");
        }
        - (void)excuteDelay
        {
            // 延迟2秒执行：
            double delayInSeconds = 2.0;
            dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
            dispatch_after(popTime, excuteQueue, ^(void){
                NSLog(@"excute the delay task.");
            });
        }
结果：  

        2015-09-16 18:24:53.190 testGCD[5032:158540] Start a  task after delay 2s.
        2015-09-16 18:24:53.191 testGCD[5032:158540] Do other thing!
        2015-09-16 18:24:55.383 testGCD[5032:158571] excute the delay task.

4. 单例执行 － 有时候我们的任务只执行一次就足以，但我们不知道它是否已经执行，并需要确保它已执行。  

        //先将我们的入口改造一下，调用时设置type为4.
        - (void)asyncExcute:(NSUInteger)type
        {
            if(!excuteQueue)
                excuteQueue =  dispatch_queue_create("my_queue", nil);
            
            switch (type) {
                    
                case 1:
                {
                    
                }
                    break;
                    
                case 2:
                {
                    
                }
                    break;
                    
                case 3:
                {
                    NSLog(@"Start a  task after delay 2s.");
                    [self excuteDelay];
                    NSLog(@"Do other thing!");
                }
                    break;
                    
                case 4:
                {
                    double delayInSeconds = 2.0;
                    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
                    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
                        [self onceExcute];
                    });
                    NSLog(@"excute first time");
                    [self onceExcute];
                }
                    break;
                    
                default:
                    break;
            }
        }

        - (void)onceExcute
        {
            static dispatch_once_t onceToken;
            dispatch_once(&onceToken, ^{
                NSLog(@"excute once.");
                sleep(3);
            });
        }
结果  

        2015-09-16 18:33:58.789 testGCD[5087:161564] excute first time
        2015-09-16 18:33:58.789 testGCD[5087:161564] excute once.
我们发现虽然调用了两次，但是我们的结果是只执行了一次。

推荐文章：  
[GCD 深入理解（一）](http://www.cocoachina.com/industry/20140428/8248.html);  
[GCD 深入理解（二）](http://www.cocoachina.com/industry/20140515/8433.html);  
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>　  <code>GCD</code>全名叫Grand Central Dispatch－并行调度中心，它是Apple为了并发任务而专门开发的一套底层接口，集语法优化，runtime库，系统底层支持等诸多优势于一身，自动为应用平衡性能系统资源，不知甩了NThread几条街。</p>

<p>GCD使用block来作为执行体，它可以直接在调用的地方封装好一段代码，加强了关联性，并且block具有获取当前类的信息，省去了手动传递参数。  </p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//执行一个后台操作
do something at a background thread

if (success) {
    dispatch_async(dispatch_get_main_queue(), ^{
       //回到主线程处理结果
       //do something on main thread after get the result

    });
} else {
    NSLog(@"error： %@", error);
}
);
</code></pre>

<p>就上面短短一些代码，我们就切换了两次线程，做了两次操作 ，没有传任何参数，也没有另写回调接口，操作和结果处理都在一块，这就是GCD带来的语法便利性。</p>

<h2 id="">队列</h2>

<p>GCD提供了一系列的C风格接口实现多线程的功能，而线程的实现则在底层封装，我们每个代码块都可视作一个任务，而暴露出来的则是以下几种任务调度队列(dispatch queue)：</p>

<hr>

<ol>
<li><p>主队列main queue － 对应线程中的主线程，所有放在主队列中的代码块都将被分配在主线程中执行。获取方式 <code>dispatch_get_main_queue()</code>；</p></li>
<li><p>并行队列 － 并行队列主要有两种，一种是系统一直运行在后台的，还有一种是自己生成的。</p></li>
<li><p>后台全局并发队列（global dispatch queue），通过<code>dispatch_get_global_queue(0, 0)</code>获取；它有两个参数，第一个是设置任务执行优先级，一般我们用<code>DISPATCH_QUEUE_PRIORITY_DEFAULT（值为0）</code>，还有一个是apple备用参数，传非0参数可能导致空指什异常。</p></li>
<li><p>用户自定并发队列(concurrent queue) － 通过<code>dispatch_queue_create("concurrent", DISPATCH_QUEUE_CONCURRENT)</code>来获取，第一个参数是Ｃ字符串，用来标识这个队列，第二个参数则是队列类型－并发 or 串行。
<code>DISPATCH_QUEUE_CONCURRENT</code> 表示并发队列，<code>DISPATCH_QUEUE_SERIAL</code>则表示串行队列，默认<code>(NULL)</code>为串行。</p></li>
<li><p>串行队列（serial queue）－ 这个同样包含有两个，一个就是我们的主队列(main queue)，还有一个则是用户创建的队列。通过<code>dispatch_queue_create("concurrent", NULL)</code>来获取。</p></li>
</ol>

<hr>

<p>需要注意的是因为它是基于Ｃ的，所以我们自己创建的队列需要手动来管理内存，在用完后调用<code>dispatch_release(queue)</code>释放它,所有的GCD对象都是如此。不论并发队列还是串行队列，在没有建立依赖的情况下，所有的任务都是IFIO的。不同的是，串行是一个任务执行完了才能执行下一个，而并行则只有要空闲资源，就会按序一个接一个开始执行，不用等它其它任务执行结束，顺序是不可预知的。</p>

<h2 id="">执行方式</h2>

<ol>
<li><p>同步 (sync)－ 同步执行会让当前的调用线程处于等待状态，直到任务执行完成才继续。  </p>

<pre><code>例1


- (void)syncExcute
{
    dispatch_queue_t queue = dispatch_queue_create("my_queue", nil);


<pre><code>dispatch_sync(queue, ^(void) {


    NSLog(@"wait for a moment!");
    sleep(3);
});
NSLog(@"I've been waiting for 3 seconds！");
</code></pre>

}
</code></pre>

<p>在这个例子中，当前线程等了3秒多后才打出log。这用在需要执行结果才能进入下一步的场景。需要注意的是，因为它会卡死线程，所以不要在主线程，主队列中去使用。</p></li>
<li><p>异步(async) － 有时候任务比较重，为了不卡死当前的执行线程，我们就把这个任务放在其它后台线程中执行。其结果是当前线程代码继续执行，提交的任务会稍后被调度。  </p>

<pre><code>static  dispatch_queue_t excuteQueue = nil;
- (void)asyncExcute
{
    if(!excuteQueue)
        excuteQueue =  dispatch_queue_create("my_queue", nil);


<pre><code>NSLog(@"Start a  task.");
dispatch_async(excuteQueue, ^(void) {


    [self excuteMainTask];
});
NSLog(@"Do other thing!");
</code></pre>

}


- (void)excuteMainTask
{
    NSLog(@"Start excute main task.");
    sleep(3);
    NSLog(@"Main task fniish!");
}
</code></pre>

<p>结果如下：  </p>

<pre><code>2015-09-16 17:32:22.455 testGCD[4667:143175] Start a  task.
2015-09-16 17:32:22.456 testGCD[4667:143219] Start excute main task.
2015-09-16 17:32:22.456 testGCD[4667:143175] Do other thing!
2015-09-16 17:32:25.461 testGCD[4667:143219] Main task fniish!
</code></pre>

<p>上面的结果可以看出：我们虽然在mainTask中睡眠，但不影响调用的线程的执行。</p></li>
<li><p>延后执行 － 有时候我们希望任务稍晚一些自动执行，就可以使用这个功能。  </p>

<pre><code>- (void)asyncExcute
{
    if(!excuteQueue)
        excuteQueue =  dispatch_queue_create("my_queue", nil);


<pre><code>NSLog(@"Start a  task after delay 2s.");
[self excuteDelay];
NSLog(@"Do other thing!");
</code></pre>

}
- (void)excuteDelay
{
    // 延迟2秒执行：
    double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
    dispatch_after(popTime, excuteQueue, ^(void){
        NSLog(@"excute the delay task.");
    });
}
</code></pre>

<p>结果：  </p>

<pre><code>2015-09-16 18:24:53.190 testGCD[5032:158540] Start a  task after delay 2s.
2015-09-16 18:24:53.191 testGCD[5032:158540] Do other thing!
2015-09-16 18:24:55.383 testGCD[5032:158571] excute the delay task.
</code></pre></li>
<li><p>单例执行 － 有时候我们的任务只执行一次就足以，但我们不知道它是否已经执行，并需要确保它已执行。  </p>

<pre><code>//先将我们的入口改造一下，调用时设置type为4.
- (void)asyncExcute:(NSUInteger)type
{
    if(!excuteQueue)
        excuteQueue =  dispatch_queue_create("my_queue", nil);


<pre><code>switch (type) {


    case 1:
    {


    }
        break;


    case 2:
    {


    }
        break;


    case 3:
    {
        NSLog(@"Start a  task after delay 2s.");
        [self excuteDelay];
        NSLog(@"Do other thing!");
    }
        break;


    case 4:
    {
        double delayInSeconds = 2.0;
        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
            [self onceExcute];
        });
        NSLog(@"excute first time");
        [self onceExcute];
    }
        break;


    default:
        break;
}
</code></pre>

}


- (void)onceExcute
{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        NSLog(@"excute once.");
        sleep(3);
    });
}
</code></pre>

<p>结果  </p>

<pre><code>2015-09-16 18:33:58.789 testGCD[5087:161564] excute first time
2015-09-16 18:33:58.789 testGCD[5087:161564] excute once.
</code></pre>

<p>我们发现虽然调用了两次，但是我们的结果是只执行了一次。</p></li>
</ol>

<p>推荐文章： <br>
<a href="http://www.cocoachina.com/industry/20140428/8248.html">GCD 深入理解（一）</a>; <br>
<a href="http://www.cocoachina.com/industry/20140515/8433.html">GCD 深入理解（二）</a>;  </p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "多线程之四.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
