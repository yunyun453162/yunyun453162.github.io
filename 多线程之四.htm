<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->

　  `GCD`全名叫Grand Central Dispatch－并行调度中心，它是Apple为了并发任务而专门开发的一套底层接口，集语法优化，runtime库，系统底层支持等诸多优势于一身，自动为应用平衡性能系统资源，不知甩了NThread几条街。

GCD使用block来作为执行体，它可以直接在调用的地方封装好一段代码，加强了关联性，并且block具有获取当前类的信息，省去了手动传递参数。  
 
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //执行一个后台操作
    do something at a background thread

    if (success) {
        dispatch_async(dispatch_get_main_queue(), ^{
           //回到主线程处理结果
           //do something on main thread after get the result

        });
    } else {
        NSLog(@"error： %@", error);
    }
    );

 就上面短短一些代码，我们就切换了两次线程，做了两次操作 ，没有传任何参数，也没有另写回调接口，操作和结果处理都在一块，这就是GCD带来的语法便利性。

推荐文章：  
[GCD 深入理解（一）](http://www.cocoachina.com/industry/20140428/8248.html);  
[GCD 深入理解（二）](http://www.cocoachina.com/industry/20140515/8433.html);  
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>　  <code>GCD</code>全名叫Grand Central Dispatch－并行调度中心，它是Apple为了并发任务而专门开发的一套底层接口，集语法优化，runtime库，系统底层支持等诸多优势于一身，自动为应用平衡性能系统资源，不知甩了NThread几条街。</p>

<p>GCD使用block来作为执行体，它可以直接在调用的地方封装好一段代码，加强了关联性，并且block具有获取当前类的信息，省去了手动传递参数。  </p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//执行一个后台操作
do something at a background thread

if (success) {
    dispatch_async(dispatch_get_main_queue(), ^{
       //回到主线程处理结果
       //do something on main thread after get the result

    });
} else {
    NSLog(@"error： %@", error);
}
);
</code></pre>

<p>就上面短短一些代码，我们就切换了两次线程，做了两次操作 ，没有传任何参数，也没有另写回调接口，操作和结果处理都在一块，这就是GCD带来的语法便利性。</p>

<p>推荐文章： <br>
<a href="http://www.cocoachina.com/industry/20140428/8248.html">GCD 深入理解（一）</a>; <br>
<a href="http://www.cocoachina.com/industry/20140515/8433.html">GCD 深入理解（二）</a>;  </p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "多线程之四.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
