<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
&#160; &#160; &#160; 上一节我们了解了下IOS7后之后一些新的转场动画API,但有没有别的方法可以做呢？ －－有的，做过那次动画之后我们就发现，它的原理就是在一个容器view中对两个子view做过渡处理，那么我们就可以自定义一个容器view，然后对里面的子view做转场动画。


##利用上节的知识自定义动画上下文
这里有一个利用上节特性自定义转场动画的教程：[自定义View Controller容器转场](http://blog.jobbole.com/69220/)  
鉴于原帖有删除和修改的可能，我fork了他的源码：[源码](https://github.com/yunyun453162/issue-12-custom-container-transitions)

   它最主要的工作就是自定了一个个人的动画上下文，这样子我们就可以利用上节所写出来的动画控制器和动画效果代码，而且不用做什么改动,还有良好的扩展性。


## 使用CATransition
CATransition 是一个layer 层面上的动画类，它是继承于CAAnimation，封装了一些常用的简单动作，并且保留了扩展性。
主要区别在于它的type和subType属性，一个定义了动画效果，另一个则定义了动画方向，不过它的部分动画效果还是私有的，使用起来要小心一些。

###示例：使用type和subType作layer动画  

        - (IBAction)buttonPressed1:(id)sender {
        UIButton *button = (UIButton *)sender;
        NSInteger tag = button.tag;
    
        CATransition *animation = [CATransition animation];
        animation.delegate = self;
        animation.duration = .45;
        animation.timingFunction = UIViewAnimationCurveEaseInOut;
    
        switch (tag) {
        case 101:
            animation.type = kCATransitionFade;
            break;
        case 102:
            animation.type = kCATransitionPush;
             break;
        case 103:
            animation.type = kCATransitionReveal;
            break;
        case 104:
             animation.type = kCATransitionMoveIn;
            break;
        case 201:
            animation.type = @"cube";
            break;
        case 202:
            animation.type = @"suckEffect";
            break;
        case 203:
            animation.type = @"oglFlip";
            break;
        case 204:
            animation.type = @"rippleEffect";
            break;
        case 205:
            animation.type = @"pageCurl";
            break;
        case 206:
            animation.type = @"pageUnCurl";
            break;
        case 207:
            animation.type = @"cameraIrisHollowOpen";
            break;
        case 208:
            animation.type = @"cameraIrisHollowClose";
            break;
        default:
            break;
        }

        NSInteger typeID = rand()%4;    

        switch (typeID) {
        case 0:
            animation.subtype = kCATransitionFromLeft;
            break;
        case 1:
            animation.subtype = kCATransitionFromBottom;
            break;
        case 2:
            animation.subtype = kCATransitionFromRight;
            break;
        case 3:
            animation.subtype = kCATransitionFromTop;
            break;
        default:
            break;
        }
    
        [self.view exchangeSubviewAtIndex:view1Index withSubviewAtIndex:view2Index];
    
        [[self.view layer] addAnimation:animation forKey:@"animation"];
         }

这里有一个更详细的操作文章：[iOS开发UI篇—核心动画(转场动画和组动画)](http://www.cnblogs.com/wendingding/p/3801454.html)

## UIViewAnimation
我们一般使用的动画效果都是在UIView层面：

    [UIView beginAnimations:nil context:context];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDuration:duration];
    ...
    [UIView commitAnimations];

这个动画既可以用在容器view自身，也可以用在它的子view上，让我们可以定义出不同的动画效果。   
它还有专门的两个转场动画方法：

    + (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion NS_AVAILABLE_IOS(4_0);

    + (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^)(BOOL finished))completion NS_AVAILABLE_IOS(4_0); // toView added to fromView.superview, fromView removed from its superview

###示例1:在容器view中使用自定义动画

    CGContextRef context = UIGraphicsGetCurrentContext();
    [UIView beginAnimations:nil context:context];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    [UIView setAnimationDuration:kDuration];
    NSInteger tag = 105 + rand()%4;
    switch (tag) {
        case 105:
            [UIView setAnimationTransition:UIViewAnimationTransitionCurlDown forView:self.view cache:YES];
            break;
        case 106:
            [UIView setAnimationTransition:UIViewAnimationTransitionCurlUp forView:self.view cache:YES];
            break;
        case 107:
            [UIView setAnimationTransition:UIViewAnimationTransitionFlipFromLeft forView:self.view cache:YES];
            break;
        case 108:
            [UIView setAnimationTransition:UIViewAnimationTransitionFlipFromRight forView:self.view cache:YES];
            break;
        default:
            break;
    }
    
    //greenView和blueView是在容器view--self.view中的两个子view
    NSUInteger green = [[self.view subviews] indexOfObject:greenView];
    NSUInteger blue = [[self.view subviews] indexOfObject:blueView];
    [self.view exchangeSubviewAtIndex:green withSubviewAtIndex:blue];
    
    [UIView setAnimationDelegate:self];
    // 动画完毕后调用某个方法
    //[UIView setAnimationDidStopSelector:@selector(animationFinished:)];
    [UIView commitAnimations];

###示例2:使用UIView类方法提供的方式

    [UIView transitionWithView:self.navigationController.view duration:0.5 options:UIViewAnimationOptionTransitionCurlUp animations:^{
        MyViewController *my=[[MyViewController alloc] init];
        [self.navigationController pushViewController:my animated:NO];
    } completion:^(BOOL finished) {
        
    }];

##Storyboard
实现方式就是继承UIStoryboardSegue类，然后重写Perform方法,然后在Storyboard上将类设置为自定义的类。
这里有一个storyboard动画的例子[自定义一个UIStoryboardSegue并使用](http://www.xcoder.cn/?p=494),还有一个有意思的问题及解决方案：[Custom Segue实现flip效果，碰到的问题](http://blog.sina.com.cn/s/blog_5573214b01017wse.html)


##小结
转场动画我就说这么多了，有些知识点我并没有去深入的讲解，但是方法和概念讲到了一点，感谢Apple提供的这么多的现成的方法和框架，让我们省了不少事，如果想要了解更多关于动画的知识，可以去看看关于UIAnimation这个类知识，相信会有很多收获。
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>&nbsp; &nbsp; &nbsp; 上一节我们了解了下IOS7后之后一些新的转场动画API,但有没有别的方法可以做呢？ －－有的，做过那次动画之后我们就发现，它的原理就是在一个容器view中对两个子view做过渡处理，那么我们就可以自定义一个容器view，然后对里面的子view做转场动画。</p>

<h2 id="">利用上节的知识自定义动画上下文</h2>

<p>这里有一个利用上节特性自定义转场动画的教程：<a href="http://blog.jobbole.com/69220/">自定义View Controller容器转场</a> <br>
鉴于原帖有删除和修改的可能，我fork了他的源码：<a href="https://github.com/yunyun453162/issue-12-custom-container-transitions">源码</a></p>

<p>它最主要的工作就是自定了一个个人的动画上下文，这样子我们就可以利用上节所写出来的动画控制器和动画效果代码，而且不用做什么改动,还有良好的扩展性。</p>

<h2 id="catransition">使用CATransition</h2>

<p>CATransition 是一个layer 层面上的动画类，它是继承于CAAnimation，封装了一些常用的简单动作，并且保留了扩展性。
主要区别在于它的type和subType属性，一个定义了动画效果，另一个则定义了动画方向，不过它的部分动画效果还是私有的，使用起来要小心一些。</p>

<h3 id="typesubtypelayer">示例：使用type和subType作layer动画</h3>

<pre><code>    - (IBAction)buttonPressed1:(id)sender {
    UIButton *button = (UIButton *)sender;
    NSInteger tag = button.tag;

    CATransition *animation = [CATransition animation];
    animation.delegate = self;
    animation.duration = .45;
    animation.timingFunction = UIViewAnimationCurveEaseInOut;

    switch (tag) {
    case 101:
        animation.type = kCATransitionFade;
        break;
    case 102:
        animation.type = kCATransitionPush;
         break;
    case 103:
        animation.type = kCATransitionReveal;
        break;
    case 104:
         animation.type = kCATransitionMoveIn;
        break;
    case 201:
        animation.type = @"cube";
        break;
    case 202:
        animation.type = @"suckEffect";
        break;
    case 203:
        animation.type = @"oglFlip";
        break;
    case 204:
        animation.type = @"rippleEffect";
        break;
    case 205:
        animation.type = @"pageCurl";
        break;
    case 206:
        animation.type = @"pageUnCurl";
        break;
    case 207:
        animation.type = @"cameraIrisHollowOpen";
        break;
    case 208:
        animation.type = @"cameraIrisHollowClose";
        break;
    default:
        break;
    }

    NSInteger typeID = rand()%4;    

    switch (typeID) {
    case 0:
        animation.subtype = kCATransitionFromLeft;
        break;
    case 1:
        animation.subtype = kCATransitionFromBottom;
        break;
    case 2:
        animation.subtype = kCATransitionFromRight;
        break;
    case 3:
        animation.subtype = kCATransitionFromTop;
        break;
    default:
        break;
    }

    [self.view exchangeSubviewAtIndex:view1Index withSubviewAtIndex:view2Index];

    [[self.view layer] addAnimation:animation forKey:@"animation"];
     }
</code></pre>

<p>这里有一个更详细的操作文章：<a href="http://www.cnblogs.com/wendingding/p/3801454.html">iOS开发UI篇—核心动画(转场动画和组动画)</a></p>

<h2 id="uiviewanimation">UIViewAnimation</h2>

<p>我们一般使用的动画效果都是在UIView层面：</p>

<pre><code>[UIView beginAnimations:nil context:context];
[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
[UIView setAnimationDuration:duration];
...
[UIView commitAnimations];
</code></pre>

<p>这个动画既可以用在容器view自身，也可以用在它的子view上，让我们可以定义出不同的动画效果。 <br>
它还有专门的两个转场动画方法：</p>

<pre><code>+ (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion NS_AVAILABLE_IOS(4_0);

+ (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^)(BOOL finished))completion NS_AVAILABLE_IOS(4_0); // toView added to fromView.superview, fromView removed from its superview
</code></pre>

<h3 id="1view">示例1:在容器view中使用自定义动画</h3>

<pre><code>CGContextRef context = UIGraphicsGetCurrentContext();
[UIView beginAnimations:nil context:context];
[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
[UIView setAnimationDuration:kDuration];
NSInteger tag = 105 + rand()%4;
switch (tag) {
    case 105:
        [UIView setAnimationTransition:UIViewAnimationTransitionCurlDown forView:self.view cache:YES];
        break;
    case 106:
        [UIView setAnimationTransition:UIViewAnimationTransitionCurlUp forView:self.view cache:YES];
        break;
    case 107:
        [UIView setAnimationTransition:UIViewAnimationTransitionFlipFromLeft forView:self.view cache:YES];
        break;
    case 108:
        [UIView setAnimationTransition:UIViewAnimationTransitionFlipFromRight forView:self.view cache:YES];
        break;
    default:
        break;
}

//greenView和blueView是在容器view--self.view中的两个子view
NSUInteger green = [[self.view subviews] indexOfObject:greenView];
NSUInteger blue = [[self.view subviews] indexOfObject:blueView];
[self.view exchangeSubviewAtIndex:green withSubviewAtIndex:blue];

[UIView setAnimationDelegate:self];
// 动画完毕后调用某个方法
//[UIView setAnimationDidStopSelector:@selector(animationFinished:)];
[UIView commitAnimations];
</code></pre>

<h3 id="2uiview">示例2:使用UIView类方法提供的方式</h3>

<pre><code>[UIView transitionWithView:self.navigationController.view duration:0.5 options:UIViewAnimationOptionTransitionCurlUp animations:^{
    MyViewController *my=[[MyViewController alloc] init];
    [self.navigationController pushViewController:my animated:NO];
} completion:^(BOOL finished) {

}];
</code></pre>

<h2 id="storyboard">Storyboard</h2>

<p>实现方式就是继承UIStoryboardSegue类，然后重写Perform方法,然后在Storyboard上将类设置为自定义的类。
这里有一个storyboard动画的例子<a href="http://www.xcoder.cn/?p=494">自定义一个UIStoryboardSegue并使用</a>,还有一个有意思的问题及解决方案：<a href="http://blog.sina.com.cn/s/blog_5573214b01017wse.html">Custom Segue实现flip效果，碰到的问题</a></p>

<h2 id="">小结</h2>

<p>转场动画我就说这么多了，有些知识点我并没有去深入的讲解，但是方法和概念讲到了一点，感谢Apple提供的这么多的现成的方法和框架，让我们省了不少事，如果想要了解更多关于动画的知识，可以去看看关于UIAnimation这个类知识，相信会有很多收获。</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "IOS转场动画2.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
