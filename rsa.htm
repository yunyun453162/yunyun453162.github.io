<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
在网络越来越发达的今天，安全也早已不仅仅是国家银行才关注的焦点，大家的生活越来越依赖于网络，在网上交易，上传下载私人资料，用网络办公等等，鉴于网络的开放性，任何人都可以拦截我们的数据包，并进行解析破解，而客户端中的本地数据，具有先天性的缺陷。软件对人们来说已经不再如以往那般神秘，一些简单的手段已经无法确保我们的数据安全，对资料的加密非常重要。

##加密

通常情况下，我们用一些只有自己知道的数据来对要加密的原始数据进行一些复杂的数学运算，得到加密后的数据，这个过程称之为加密，而那个只有我们知道的用来加密的数据称之为密钥。


如果我们要解密呢，怎么办？
1. 拿到密钥和加密算法，对加密数据进行逆运算，这种是早期的算法，称之为对称加密，加密方需要把密钥和算法给解密方，安全性一般，易破解，不过运算速度快，效率高，可以加密大数据，这类加密常用的有AES,DES，3DES(三层DES)等。

2. 只负责加密，如md5，只可以加密，无法进行还原。这个一般用来做数据签名，自己把数据进行md5签名后，和包一起传给使用方，使用方可以验证md5签名，防止被三方篡改。

3. 非对称加密。非对称加密就是加密密钥和解密密钥不同的加密算法，这种算法非常可靠。它的一对密钥被称之为公钥和私钥，私钥可以生成公钥，但公钥不能反过来生成私钥，过程如下：

        （1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
        （2）甲方获取乙方的公钥，然后用它对信息加密。 
        （3）乙方得到加密后的信息，用私钥解密。
        （4）乙方用私钥对数据进行签名，甲方用公钥进行验证。


##制作证书  

1. 最简单快捷的方法，打开Terminal，使用openssl（Mac OS X自带）生成私钥和自签名的x509证书。  

    openssl req -x509 -out public_key.der -outform der -new -newkey rsa:1024 -keyout private_key.pem -days 3650

按照命令行的提示输入内容就行了。  
几个说明：  
public_key.der是输出的自签名的x509证书，即我们要用的。  
private_key.pem是输出的私钥，用来解密的，请妥善保管。  
rsa:1024这里的1024是密钥长度，1024是比较安全的，如果需要更安全的话，可以用2048，但是加解密代价也会增加。  
-days：证书过期时间，一定要加上这个参数，默认的证书过期时间是30天，一般我们不希望证书这么短就过期，所以写上比较合适的天数，例如这里的3650(10年)。  
事实上，这一行命令包含了好几个步骤（我研究下面这些步骤的原因是我手头已经由一个private_key.pem私钥了，想直接用这个来生成x509证书，也就是用到了下面的2-3）  

1) 创建私钥  

    openssl genrsa -out private_key.pem 1024
我们用记事本打开生成的证书  
![私钥证书字符](imgs/private_pem.png)

2)创建证书请求（按照提示输入信息）

    openssl req -new -out cert.csr -key private_key.pem
这个过程中我们需在填写一些信息：  
![信息](imgs/companyInfo.png)

3)自签署根证书  
   
     openssl x509 -req -in cert.csr -out public_key.der -outform der -signkey private_key.pem -days 3650

我们的IOS专用公钥证书(der格式)生成了。

不过如果我们要用openssl或给服务器和安卓的同学的话，就不能用这个x509证书了，而是用下面的RSA密钥生成命令：  

1. 生成RSA私钥  

    openssl>genrsa -out rsa_private_key.pem 1024
2. 生成RSA公钥

    openssl>rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem
3. 将RSA私钥转换成PKCS8格式

    openssl>pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt
把我们的生成的pem证书传给他们吧。


##IOS下RSA加密





<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>在网络越来越发达的今天，安全也早已不仅仅是国家银行才关注的焦点，大家的生活越来越依赖于网络，在网上交易，上传下载私人资料，用网络办公等等，鉴于网络的开放性，任何人都可以拦截我们的数据包，并进行解析破解，而客户端中的本地数据，具有先天性的缺陷。软件对人们来说已经不再如以往那般神秘，一些简单的手段已经无法确保我们的数据安全，对资料的加密非常重要。</p>

<h2 id="">加密</h2>

<p>通常情况下，我们用一些只有自己知道的数据来对要加密的原始数据进行一些复杂的数学运算，得到加密后的数据，这个过程称之为加密，而那个只有我们知道的用来加密的数据称之为密钥。</p>

<p>如果我们要解密呢，怎么办？
1. 拿到密钥和加密算法，对加密数据进行逆运算，这种是早期的算法，称之为对称加密，加密方需要把密钥和算法给解密方，安全性一般，易破解，不过运算速度快，效率高，可以加密大数据，这类加密常用的有AES,DES，3DES(三层DES)等。</p>

<ol>
<li><p>只负责加密，如md5，只可以加密，无法进行还原。这个一般用来做数据签名，自己把数据进行md5签名后，和包一起传给使用方，使用方可以验证md5签名，防止被三方篡改。</p></li>
<li><p>非对称加密。非对称加密就是加密密钥和解密密钥不同的加密算法，这种算法非常可靠。它的一对密钥被称之为公钥和私钥，私钥可以生成公钥，但公钥不能反过来生成私钥，过程如下：</p>

<pre><code>（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。 
（3）乙方得到加密后的信息，用私钥解密。
（4）乙方用私钥对数据进行签名，甲方用公钥进行验证。
</code></pre></li>
</ol>

<h2 id="">制作证书</h2>

<ol>
<li><p>最简单快捷的方法，打开Terminal，使用openssl（Mac OS X自带）生成私钥和自签名的x509证书。  </p>

<p>openssl req -x509 -out public<em>key.der -outform der -new -newkey rsa:1024 -keyout private</em>key.pem -days 3650</p></li>
</ol>

<p>按照命令行的提示输入内容就行了。 <br>
几个说明： <br>
public<em>key.der是输出的自签名的x509证书，即我们要用的。 <br>
private</em>key.pem是输出的私钥，用来解密的，请妥善保管。 <br>
rsa:1024这里的1024是密钥长度，1024是比较安全的，如果需要更安全的话，可以用2048，但是加解密代价也会增加。 <br>
-days：证书过期时间，一定要加上这个参数，默认的证书过期时间是30天，一般我们不希望证书这么短就过期，所以写上比较合适的天数，例如这里的3650(10年)。 <br>
事实上，这一行命令包含了好几个步骤（我研究下面这些步骤的原因是我手头已经由一个private_key.pem私钥了，想直接用这个来生成x509证书，也就是用到了下面的2-3）  </p>

<p>1) 创建私钥  </p>

<pre><code>openssl genrsa -out private_key.pem 1024
</code></pre>

<p>我们用记事本打开生成的证书 <br>
<img src="imgs/private_pem.png" alt="私钥证书字符" title=""></p>

<p>2)创建证书请求（按照提示输入信息）</p>

<pre><code>openssl req -new -out cert.csr -key private_key.pem
</code></pre>

<p>这个过程中我们需在填写一些信息： <br>
<img src="imgs/companyInfo.png" alt="信息" title=""></p>

<p>3)自签署根证书  </p>

<pre><code> openssl x509 -req -in cert.csr -out public_key.der -outform der -signkey private_key.pem -days 3650
</code></pre>

<p>我们的IOS专用公钥证书(der格式)生成了。</p>

<p>不过如果我们要用openssl或给服务器和安卓的同学的话，就不能用这个x509证书了，而是用下面的RSA密钥生成命令：  </p>

<ol>
<li><p>生成RSA私钥  </p>

<p>openssl&gt;genrsa -out rsa<em>private</em>key.pem 1024</p></li>
<li><p>生成RSA公钥</p>

<p>openssl&gt;rsa -in rsa<em>private</em>key.pem -pubout -out rsa<em>public</em>key.pem</p></li>
<li><p>将RSA私钥转换成PKCS8格式</p>

<p>openssl&gt;pkcs8 -topk8 -inform PEM -in rsa<em>private</em>key.pem -outform PEM -nocrypt
把我们的生成的pem证书传给他们吧。</p></li>
</ol>

<h2 id="iosrsa">IOS下RSA加密</h2>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "rsa.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
