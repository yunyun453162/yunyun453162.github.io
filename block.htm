<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
`Block`是`IOS 5`引入的一个特性，它非常像C的函数指针变量。它可以和普通OC变量一样使用，作用有点类似于SEL变量。我们把一段代码用一对`{}`括起来，这就是一个代片段，一般情况下我们在一个方法里面用到这些，然后在里面定义一些新的变量，进行一些计算和处理，然后跳到片段外。  

    //in a function head
    do some thing here
    ...
    {
        int x ,y,z = 0;
        do some thing with x,y,z in the scope;
        ...
    }
    
    continue do other thing

但是Block做到的远不止这些，上述的代码只能是同步执行的，也不能被当成一个参数传递给其它的方法。但是block可以异步执行并被当成参数传递，并且它还管理着它里面用到的在它范围外面的变量的生命周期，有了它我们也不用烦恼我们怎么把更多的参数传给selector了，
还有比这个更直观的回调吗？我们的delegate，selector，在它面前都黯然失色，而且它还可以有返回值。在更老版本的OC中没有在语法层面上提供函数指针类似的语法，我们想要使用类似的功能只能写delegate来实现。delegate则要求我们在一个头文件中定义协议，在需要连接的两个文件中分别添加实现和监听变量，手动监听。虽然这样子做降低了代码的复杂性，对功能进行了模块化拆分，但是效率实在低得可以，我们很多时候并不要这么做。


OK，现在让我们来看一个block是怎样声明的。  
##基本语法

<div style = "color:#E93071">变量定义</div>

    float (^aBlock)(const int*, int, float);  
 
上面这个block返回值为float类型，名字是aBlock，它接受三个参数，分别是 const int*, int, float类型。如果要一个类似功能的函数指针该如何声明？   

    float (*functionName)(const int*, int, float);

几乎毫无区别！只是把`*`号换成了`^`号而已。我们再来给我们声明的block变量赋值：

     //....
    
    float (^aBlock)(const int*, int, float);
    
    aBlock = ^(const int * x, int y, float z){
        
        return (*x + y)*z;
    };

把它们连到一块就是：  

    float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){
            
            return (*x + y)*z;
        };
如果我们把返回值，参数全部去掉-无参无返回值：  

    void(^aBlock)() = ^{
        //do something
    };
这货越看越像一个函数指针了。。

<!--<a href="">调用</a> -->
<div style = "color:#E93071">调用</div>
我们再加上调用过程：  

    float (^aBlock)(const int*, int, float);
    - (void)testBlock
    {
        aBlock = ^(const int * x, int y, float z){
            
            return (*x + y)*z;
        };
        
        int a = 6;
        float result =  aBlock(&a,7,8.f);
        NSLog(@"result is %f",result);
    }

一个功能完整的block就新鲜出炉了，我们运行测试一下：  
    
    2015-09-23 16:01:02.844 testBlock[3461:111927] result is 104.000000

这只是让我们看到它作为一个普通代码块和类似selector的功能，现在我想看看怎么把它当成一个参数传出去。

    - (void)testBlock
    {
        float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){
            
            return (*x + y)*z;
        };
        
        int a = 6;
        float result =  aBlock(&a,7,8.f);
        NSLog(@"result is %f",result);
        
        float result2 = [self getResultWithBlock:^(const int* x, int y, float z){
               return (*x + z)*y;
        }];
        
        NSLog(@"result 2 is %f",result2);
    }


    - (float)getResultWithBlock:(float (^)(const int* , int , float))block
    {
        int a = 6;
        return  block(&a,7,8.f);
    }
好吧，这下连名字都可以省掉了，不用block名，也不用写参数名。  
结果：
  
    2015-09-23 16:41:06.386 testBlock[3555:126981] result is 104.000000
    2015-09-23 16:41:06.387 testBlock[3555:126981] result 2 is 98.000000

感觉很方便有没有。这段代码  

     float result2 = [self getResultWithBlock:^(const int* x, int y, float z){
               return (*x + z)*y;
        }];
中的`return (*x + z)*y;`就是我们写在block里面的回调代码，它被包含在block中一起传递给了`getResultWithBlock:`这个接口，而这个接口调用执行了我们传过去的block。如果我们并不想立即执行 block中的代码，而是比如等某些事情发生后：下载完成，延时5s，我们就可以通过GCD或NSOperationQueue把它发配到异步线程中去等待执行。block既可以当作一个普通的selector，也可当作delegate，这取决你的需求和设计。

##内存管理
block看着很美丽，但在使用过程中还是有无数的陷阱在等你。  
1. 它默认通过值拷贝的方式引用局部变量。

    int a = 6;
    float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){
            //a++;
            return (*x + y)*z+a ;
        };
结果：  

    2015-09-23 17:57:21.434 testBlock[3676:156801] a is 6
    2015-09-23 17:57:21.434 testBlock[3676:156801] reuslt is 110.000000,a is 6

我们虽然可以在block里面用，但不能修改局问部变量，我们不注释掉那段代码就会报错，但是全局或者静态变量它又是指针引用，我们取消掉注释并在 `int a`前加上 `static`或者 `__block`。

    - (void)testBaseTypeValue
    {
        static int a = 6;
        float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){
            
            a++;
            NSLog(@"a is %i",a);
            return (*x + y)*z+a ;
            
        };
        NSLog(@"reuslt is %f,a is %i",aBlock(&a,7,8.f),a);
    } 
    2015-09-23 17:50:34.274 testBlock[3653:153851] a is 7
    2015-09-23 17:50:34.275 testBlock[3653:153851] reuslt is 119.000000,a is 7

2. 对于引用的对象变量， 它有点微妙的差别

    - (void)testObjectValue
    {
        __weak NSString * testStr = @"test";
        void (^strBlock)() = ^{
            NSLog(@"value is %@, address is %p",testStr,(&testStr));
        };
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, NSEC_PER_SEC), dispatch_get_main_queue(), ^{
        
            strBlock();
        });
    }
在上面的示例代码中，我们使用了arc，原本`testStr `在方法结束后就要释放并且置为nil，我们用了延迟代码来执行打印`testStr`，发现它还是可以正常打印的，这说明block自动防止异步回调时空指针,当然，block会自动在结束的时候再把它释放掉，它们是不是也是通过值拷贝的方式传值？我们确认一下地址。


    - (void)testObjectValue
    {
        __weak NSString * testStr = @"test";
        NSLog(@"address outside is %p",&testStr);
        void (^strBlock)() = ^{
            NSLog(@"value is %@, address is %p",testStr,(&testStr));
        };
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, NSEC_PER_SEC), dispatch_get_main_queue(), ^{
        
            strBlock();
        });
    }

结果是：

    2015-10-12 17:37:28.499 testBlock[1960:160556] address outside is 0x7fff58344a98
    2015-10-12 17:37:29.589 testBlock[1960:160556] value is test, address is 0x7f871ac19c60
确实如我们所推测的那样,但如果你把`__weak`去掉，你就又会发现一个有趣的现象，它们的地址是一样的，block对该对象进行了强引了防止空指针，不妨自己验证一下。
 
3. 类实例变量

我们先修改一下它的定义：

    @interface ViewController ()
    {
        NSString * testStr ;
    }
修改下上面的方法：

    - (void)testObjectValue
    {
        testStr = @"test";
        NSLog(@"address outside is %p",&testStr);
        void (^strBlock)() = ^{
            NSLog(@"value is %@, address is %p",testStr,(&testStr));
        };
        
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, NSEC_PER_SEC), dispatch_get_main_queue(), ^{
        
            strBlock();
        });
    }

结果是：  

    2015-10-12 17:47:24.084 testBlock[1990:164387] address outside is 0x7f8bd964cef0
    2015-10-12 17:47:25.085 testBlock[1990:164387] value is test, address is 0x7f8bd964cef0

地址是一模一样的，说明block会自动增加它们的引用计数。那么这里有就个坑了，如果该block作为该类的属性，那么它必然等`[self dealloc]`执行时才能释放掉，而如果该block里面又引用有self,那它们就构成了互相等待死锁－－retain-cycle。我们在这种情况下一定要小心，找一个合适的地方，手动把`self.block = nil;`加上去，手动破坏这个cycle。

如果这个block不被自己持有，那就无所谓了，让持有它的人去释放吧。

推荐文章 ：  
[官方文档](https://developer.apple.com/library/prerelease/tvos/documentation/General/Conceptual/DevPedia-CocoaCore/Block.html#//apple_ref/doc/uid/TP40008195-CH3-SW1);    
[Objective-C中的Block](http://www.cocoachina.com/ios/20150109/10891.html);    
[ iOS中block实现的探究](http://blog.csdn.net/jasonblog/article/details/7756763);
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p><code>Block</code>是<code>IOS 5</code>引入的一个特性，它非常像C的函数指针变量。它可以和普通OC变量一样使用，作用有点类似于SEL变量。我们把一段代码用一对<code>{}</code>括起来，这就是一个代片段，一般情况下我们在一个方法里面用到这些，然后在里面定义一些新的变量，进行一些计算和处理，然后跳到片段外。  </p>

<pre><code>//in a function head
do some thing here
...
{
    int x ,y,z = 0;
    do some thing with x,y,z in the scope;
    ...
}

continue do other thing
</code></pre>

<p>但是Block做到的远不止这些，上述的代码只能是同步执行的，也不能被当成一个参数传递给其它的方法。但是block可以异步执行并被当成参数传递，并且它还管理着它里面用到的在它范围外面的变量的生命周期，有了它我们也不用烦恼我们怎么把更多的参数传给selector了，
还有比这个更直观的回调吗？我们的delegate，selector，在它面前都黯然失色，而且它还可以有返回值。在更老版本的OC中没有在语法层面上提供函数指针类似的语法，我们想要使用类似的功能只能写delegate来实现。delegate则要求我们在一个头文件中定义协议，在需要连接的两个文件中分别添加实现和监听变量，手动监听。虽然这样子做降低了代码的复杂性，对功能进行了模块化拆分，但是效率实在低得可以，我们很多时候并不要这么做。</p>

<p>OK，现在让我们来看一个block是怎样声明的。  </p>

<h2 id="">基本语法</h2>

<div style="color:#E93071">变量定义</div>

<pre><code>float (^aBlock)(const int*, int, float);  
</code></pre>

<p>上面这个block返回值为float类型，名字是aBlock，它接受三个参数，分别是 const int*, int, float类型。如果要一个类似功能的函数指针该如何声明？   </p>

<pre><code>float (*functionName)(const int*, int, float);
</code></pre>

<p>几乎毫无区别！只是把<code>*</code>号换成了<code>^</code>号而已。我们再来给我们声明的block变量赋值：</p>

<pre><code> //....

float (^aBlock)(const int*, int, float);

aBlock = ^(const int * x, int y, float z){

    return (*x + y)*z;
};
</code></pre>

<p>把它们连到一块就是：  </p>

<pre><code>float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){

        return (*x + y)*z;
    };
</code></pre>

<p>如果我们把返回值，参数全部去掉-无参无返回值：  </p>

<pre><code>void(^aBlock)() = ^{
    //do something
};
</code></pre>

<p>这货越看越像一个函数指针了。。</p>

<!--<a href="">调用</a> -->

<div style="color:#E93071">调用</div>

<p>我们再加上调用过程：  </p>

<pre><code>float (^aBlock)(const int*, int, float);
- (void)testBlock
{
    aBlock = ^(const int * x, int y, float z){

        return (*x + y)*z;
    };

    int a = 6;
    float result =  aBlock(&amp;a,7,8.f);
    NSLog(@"result is %f",result);
}
</code></pre>

<p>一个功能完整的block就新鲜出炉了，我们运行测试一下：  </p>

<pre><code>2015-09-23 16:01:02.844 testBlock[3461:111927] result is 104.000000
</code></pre>

<p>这只是让我们看到它作为一个普通代码块和类似selector的功能，现在我想看看怎么把它当成一个参数传出去。</p>

<pre><code>- (void)testBlock
{
    float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){

        return (*x + y)*z;
    };

    int a = 6;
    float result =  aBlock(&amp;a,7,8.f);
    NSLog(@"result is %f",result);

    float result2 = [self getResultWithBlock:^(const int* x, int y, float z){
           return (*x + z)*y;
    }];

    NSLog(@"result 2 is %f",result2);
}


- (float)getResultWithBlock:(float (^)(const int* , int , float))block
{
    int a = 6;
    return  block(&amp;a,7,8.f);
}
</code></pre>

<p>好吧，这下连名字都可以省掉了，不用block名，也不用写参数名。 <br>
结果：</p>

<pre><code>2015-09-23 16:41:06.386 testBlock[3555:126981] result is 104.000000
2015-09-23 16:41:06.387 testBlock[3555:126981] result 2 is 98.000000
</code></pre>

<p>感觉很方便有没有。这段代码  </p>

<pre><code> float result2 = [self getResultWithBlock:^(const int* x, int y, float z){
           return (*x + z)*y;
    }];
</code></pre>

<p>中的<code>return (*x + z)*y;</code>就是我们写在block里面的回调代码，它被包含在block中一起传递给了<code>getResultWithBlock:</code>这个接口，而这个接口调用执行了我们传过去的block。如果我们并不想立即执行 block中的代码，而是比如等某些事情发生后：下载完成，延时5s，我们就可以通过GCD或NSOperationQueue把它发配到异步线程中去等待执行。block既可以当作一个普通的selector，也可当作delegate，这取决你的需求和设计。</p>

<h2 id="">内存管理</h2>

<p>block看着很美丽，但在使用过程中还是有无数的陷阱在等你。 <br>
1. 它默认通过值拷贝的方式引用局部变量。</p>

<pre><code>int a = 6;
float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){
        //a++;
        return (*x + y)*z+a ;
    };
</code></pre>

<p>结果：  </p>

<pre><code>2015-09-23 17:57:21.434 testBlock[3676:156801] a is 6
2015-09-23 17:57:21.434 testBlock[3676:156801] reuslt is 110.000000,a is 6
</code></pre>

<p>我们虽然可以在block里面用，但不能修改局问部变量，我们不注释掉那段代码就会报错，但是全局或者静态变量它又是指针引用，我们取消掉注释并在 <code>int a</code>前加上 <code>static</code>或者 <code>__block</code>。</p>

<pre><code>- (void)testBaseTypeValue
{
    static int a = 6;
    float (^aBlock)(const int*, int, float) = ^(const int * x, int y, float z){

        a++;
        NSLog(@"a is %i",a);
        return (*x + y)*z+a ;

    };
    NSLog(@"reuslt is %f,a is %i",aBlock(&amp;a,7,8.f),a);
} 
2015-09-23 17:50:34.274 testBlock[3653:153851] a is 7
2015-09-23 17:50:34.275 testBlock[3653:153851] reuslt is 119.000000,a is 7
</code></pre>

<ol>
<li><p>对于引用的对象变量， 它有点微妙的差别</p>

<ul><li><p>(void)testObjectValue
{
__weak NSString * testStr = @"test";
void (^strBlock)() = ^{
    NSLog(@"value is %@, address is %p",testStr,(&amp;testStr));
};</p>

<p>dispatch<em>after(dispatch</em>time(DISPATCH<em>TIME</em>NOW, NSEC<em>PER</em>SEC), dispatch<em>get</em>main_queue(), ^{</p>

<pre><code>strBlock();
</code></pre>

<p>});
}
在上面的示例代码中，我们使用了arc，原本<code>testStr</code>在方法结束后就要释放并且置为nil，我们用了延迟代码来执行打印<code>testStr</code>，发现它还是可以正常打印的，这说明block自动防止异步回调时空指针,当然，block会自动在结束的时候再把它释放掉，它们是不是也是通过值拷贝的方式传值？我们确认一下地址。</p></li>
<li><p>(void)testObjectValue
{
__weak NSString * testStr = @"test";
NSLog(@"address outside is %p",&amp;testStr);
void (^strBlock)() = ^{
    NSLog(@"value is %@, address is %p",testStr,(&amp;testStr));
};</p>

<p>dispatch<em>after(dispatch</em>time(DISPATCH<em>TIME</em>NOW, NSEC<em>PER</em>SEC), dispatch<em>get</em>main_queue(), ^{</p>

<pre><code>strBlock();
</code></pre>

<p>});
}</p></li></ul></li>
</ol>

<p>结果是：</p>

<pre><code>2015-10-12 17:37:28.499 testBlock[1960:160556] address outside is 0x7fff58344a98
2015-10-12 17:37:29.589 testBlock[1960:160556] value is test, address is 0x7f871ac19c60
</code></pre>

<p>确实如我们所推测的那样,但如果你把<code>__weak</code>去掉，你就又会发现一个有趣的现象，它们的地址是一样的，block对该对象进行了强引了防止空指针，不妨自己验证一下。</p>

<ol>
<li>类实例变量</li>
</ol>

<p>我们先修改一下它的定义：</p>

<pre><code>@interface ViewController ()
{
    NSString * testStr ;
}
</code></pre>

<p>修改下上面的方法：</p>

<pre><code>- (void)testObjectValue
{
    testStr = @"test";
    NSLog(@"address outside is %p",&amp;testStr);
    void (^strBlock)() = ^{
        NSLog(@"value is %@, address is %p",testStr,(&amp;testStr));
    };

    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, NSEC_PER_SEC), dispatch_get_main_queue(), ^{

        strBlock();
    });
}
</code></pre>

<p>结果是：  </p>

<pre><code>2015-10-12 17:47:24.084 testBlock[1990:164387] address outside is 0x7f8bd964cef0
2015-10-12 17:47:25.085 testBlock[1990:164387] value is test, address is 0x7f8bd964cef0
</code></pre>

<p>地址是一模一样的，说明block会自动增加它们的引用计数。那么这里有就个坑了，如果该block作为该类的属性，那么它必然等<code>[self dealloc]</code>执行时才能释放掉，而如果该block里面又引用有self,那它们就构成了互相等待死锁－－retain-cycle。我们在这种情况下一定要小心，找一个合适的地方，手动把<code>self.block = nil;</code>加上去，手动破坏这个cycle。</p>

<p>如果这个block不被自己持有，那就无所谓了，让持有它的人去释放吧。</p>

<p>推荐文章 ： <br>
<a href="https://developer.apple.com/library/prerelease/tvos/documentation/General/Conceptual/DevPedia-CocoaCore/Block.html#//apple_ref/doc/uid/TP40008195-CH3-SW1">官方文档</a>; <br>
<a href="http://www.cocoachina.com/ios/20150109/10891.html">Objective-C中的Block</a>; <br>
<a href="http://blog.csdn.net/jasonblog/article/details/7756763"> iOS中block实现的探究</a>;</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "block.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
