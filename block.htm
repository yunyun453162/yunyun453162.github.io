<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
`Block`是`IOS 5`引入的一个特性，它非常像C的函数指针变量。它可以和普通OC变量一样使用，作用有点类似于SEL变量。我们把一段代码用一对`{}`括起来，这就是一个代片段，一般情况下我们在一个方法里面用到这些，然后在里面定义一些新的变量，进行一些计算和处理，然后跳到片段外。  

    //in a function head
    do some thing here
    ...
    {
        int x ,y,z = 0;
        do some thing with x,y,z in the scope;
        ...
    }
    
    continue do other thing

但是Block做到的远不止这些，上述的代码只能是同步执行的，也不能被当成一个参数传递给其它的方法。但是block可以异步执行并被当成参数传递，并且它还管理着它里面用到的在它范围外面的变量的生命周期，有了它我们也不用烦恼我们怎么把更多的参数传给selector了，
还有比这个更直观的回调吗？我们的delegate，selector，在它面前都黯然失色，而且它还可以有返回值。

OK，现在让我们来看一个block是怎样定义的。



推荐文章 ：  
[官方文档](https://developer.apple.com/library/prerelease/tvos/documentation/General/Conceptual/DevPedia-CocoaCore/Block.html#//apple_ref/doc/uid/TP40008195-CH3-SW1);  
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p><code>Block</code>是<code>IOS 5</code>引入的一个特性，它非常像C的函数指针变量。它可以和普通OC变量一样使用，作用有点类似于SEL变量。我们把一段代码用一对<code>{}</code>括起来，这就是一个代片段，一般情况下我们在一个方法里面用到这些，然后在里面定义一些新的变量，进行一些计算和处理，然后跳到片段外。  </p>

<pre><code>//in a function head
do some thing here
...
{
    int x ,y,z = 0;
    do some thing with x,y,z in the scope;
    ...
}

continue do other thing
</code></pre>

<p>但是Block做到的远不止这些，上述的代码只能是同步执行的，也不能被当成一个参数传递给其它的方法。但是block可以异步执行并被当成参数传递，并且它还管理着它里面用到的在它范围外面的变量的生命周期，有了它我们也不用烦恼我们怎么把更多的参数传给selector了，
还有比这个更直观的回调吗？我们的delegate，selector，在它面前都黯然失色，而且它还可以有返回值。</p>

<p>OK，现在让我们来看一个block是怎样定义的。</p>

<p>推荐文章 ： <br>
<a href="https://developer.apple.com/library/prerelease/tvos/documentation/General/Conceptual/DevPedia-CocoaCore/Block.html#//apple_ref/doc/uid/TP40008195-CH3-SW1">官方文档</a>;  </p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "block.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
