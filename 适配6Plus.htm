<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
今天群里有人问到1x,2x,3x的图到底该怎么切？有人说按屏幕分辨率，也有人说6Plus的切图分辨率比实际分辨率大，是2208x1242，得按这个切。


刚开始的时候草草分析过一次，但是：

- 因为苹果让2x内容等比放大自动适配6p，虽然模糊了些，但还可以接受。
- Apple不强制要求适配;
- 适配的话我们的包也要增大不小，美工，程序都有不少工作。


基于以上的原因，我前后几个app都没有去做这个适配。对于适配这块还是一知半解。今天正好在接友盟，闲来无事，也就略作分析。我们知道`UIView`有个`contentMode`属性，有个枚举`(UIViewContentModeCenter)`是设置原大小显示，那么我们就可以利这这个属性来判断我们的图片是不是`刚好`符合要求。

##基本步骤：

1. xcode6.4新建一个singleview工程，它自动适配6p;
2. 用代码的方式手动地在一个全屏view中添加3个imageView；
3. 设置imageView的frame大小为固定值，如80X120，显示模式为UIViewContentModeCenter（原图大小）；
4. 设置imageView的背景色为orangeColor,并设置边框裁剪。
5. 按framesiez80X120准备：240X360, 250X380(稍大些即可)，220X320准备3张不同的3x图；
6.分别在5s,6,6p模拟器上运行代码并察看结果。

###步骤一
打开xcode,在welcom面板中选择"
Create a new Xcode project"->在iOS Application中选中single view application.->输入工程名等信息，点next->选择工程路径，create。
###步骤二，三，四
在ViewContr
oller.m的添加如下代码  

    - (void)viewDidLoad {
        [super viewDidLoad];
        // Do any additional setup after loading the view, typically from a nib.
        
        [self addImageViews];
    }

    - (void)addImageViews
    {
        NSArray * imagesArray = @[@"",@"",@""];
        for(int i = 0; i < 3; i ++)
        {
            UIImageView * imgView = [self createImageView];
            CGPoint center = imgView.center;
            center.x = [UIScreen mainScreen].bounds.size.width /4 * (i+1) ;
            imgView.center = center;
            imgView.image = [UIImage imageNamed:imagesArray[i]];
        }
    }


    - (UIImageView *)createImageView
    {
        UIImageView * view = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 80, 120)];
        view.backgroundColor = [UIColor orangeColor];
        view.contentMode = UIViewContentModeCenter;
        view.clipsToBounds = YES;
        view.center = self.view.center;
        [self.view addSubview:view];
        
        return view;
        
    }
    
###步骤五

装备的好三张图片：
现在我们准备好了三张3x图一张由middle3x缩放出来的2x图。把图片名字加入`- (void)addImageViews`的代码中：  
 
    NSArray * imagesArray = @[@"test_small",@"test_middle",@"test_max"];

运行6P模拟器，对比三个视图。

##结果
我们发现，在原图大小模式下，同frame大小区块填充的3x的图片刚好是1x的三倍，小图露出底色，大图的红色边框被裁剪。

这是否说明我们在切图的时候，适配6plus的图应该是2x的1.5倍切图？

很多人是这样子做的，并且做出来的效果看上去也是对的，但事实并不是如此简单。我们分别用模拟器打印了下[UIScreen main
Screen]的size,发现6plus的大小是{414, 736}}，6的是{375, 667}}，5的是{320, 568}，这说明它们的frame它们的frame并不是等大的－－当然这一点我们一直有数。不过我们对比了下它们的宽高比，这三个屏又是一致的。

那意味在一要求不高的情况下，我们确实也可用一套设计图来修三套图片出来，模糊也不会很明显，当然这必然不能用`UIViewContentModeCenter `来填充了，如果有更精细的要求，以5s的分辨率`640X1136`为例，`6`是与它的宽比是`1.172`倍，`6p`则是它的`1.294`倍。那么我们可以计算`6P`的`切图分辨率`是`1242X2208`，而设备实际分辨率是`1920X1080`。

到这里我们似乎可以得出以下结果： 

1. 在要求不高的情况下，我们可以粗以2x的1.5倍切3x图片，并且采用放大填充模式。
2. 如果按方式1切图，并采用原图模式或者frame大小不变，6,6p上的控件将显得比设计图上小一圈。
3.  对需要用到center模式的图frame变化的区域填充，按照计算出来的分辨率分别切图。


但事情远不止这些，我们的现在都广泛使用了`AutoLayout`来进行适配，很多时候我们控制的间距可能没有变化，这导致我们的frame的宽高并不是严格等比变化的，甚至有时候我们限制高，但宽是自适应的，或者限制了宽，高是自适应的，这时候切图又要重新计算了。为了让我们自己少做点工作，我们可以通过`AutoLayout`的`Aspect Ratio`来锁死控件的`宽高比`。
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>今天群里有人问到1x,2x,3x的图到底该怎么切？有人说按屏幕分辨率，也有人说6Plus的切图分辨率比实际分辨率大，是2208x1242，得按这个切。</p>

<p>刚开始的时候草草分析过一次，但是：</p>

<ul>
<li>因为苹果让2x内容等比放大自动适配6p，虽然模糊了些，但还可以接受。</li>
<li>Apple不强制要求适配;</li>
<li>适配的话我们的包也要增大不小，美工，程序都有不少工作。</li>
</ul>

<p>基于以上的原因，我前后几个app都没有去做这个适配。对于适配这块还是一知半解。今天正好在接友盟，闲来无事，也就略作分析。我们知道<code>UIView</code>有个<code>contentMode</code>属性，有个枚举<code>(UIViewContentModeCenter)</code>是设置原大小显示，那么我们就可以利这这个属性来判断我们的图片是不是<code>刚好</code>符合要求。</p>

<h2 id="">基本步骤：</h2>

<ol>
<li>xcode6.4新建一个singleview工程，它自动适配6p;</li>
<li>用代码的方式手动地在一个全屏view中添加3个imageView；</li>
<li>设置imageView的frame大小为固定值，如80X120，显示模式为UIViewContentModeCenter（原图大小）；</li>
<li>设置imageView的背景色为orangeColor,并设置边框裁剪。</li>
<li>按framesiez80X120准备：240X360, 250X380(稍大些即可)，220X320准备3张不同的3x图；
6.分别在5s,6,6p模拟器上运行代码并察看结果。</li>
</ol>

<h3 id="">步骤一</h3>

<p>打开xcode,在welcom面板中选择"
Create a new Xcode project"-&gt;在iOS Application中选中single view application.-&gt;输入工程名等信息，点next-&gt;选择工程路径，create。</p>

<h3 id="">步骤二，三，四</h3>

<p>在ViewContr
oller.m的添加如下代码  </p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.

    [self addImageViews];
}

- (void)addImageViews
{
    NSArray * imagesArray = @[@"",@"",@""];
    for(int i = 0; i &lt; 3; i ++)
    {
        UIImageView * imgView = [self createImageView];
        CGPoint center = imgView.center;
        center.x = [UIScreen mainScreen].bounds.size.width /4 * (i+1) ;
        imgView.center = center;
        imgView.image = [UIImage imageNamed:imagesArray[i]];
    }
}


- (UIImageView *)createImageView
{
    UIImageView * view = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 80, 120)];
    view.backgroundColor = [UIColor orangeColor];
    view.contentMode = UIViewContentModeCenter;
    view.clipsToBounds = YES;
    view.center = self.view.center;
    [self.view addSubview:view];

    return view;

}
</code></pre>

<h3 id="">步骤五</h3>

<p>装备的好三张图片：
现在我们准备好了三张3x图一张由middle3x缩放出来的2x图。把图片名字加入<code>- (void)addImageViews</code>的代码中：  </p>

<pre><code>NSArray * imagesArray = @[@"test_small",@"test_middle",@"test_max"];
</code></pre>

<p>运行6P模拟器，对比三个视图。</p>

<h2 id="">结果</h2>

<p>我们发现，在原图大小模式下，同frame大小区块填充的3x的图片刚好是1x的三倍，小图露出底色，大图的红色边框被裁剪。</p>

<p>这是否说明我们在切图的时候，适配6plus的图应该是2x的1.5倍切图？</p>

<p>很多人是这样子做的，并且做出来的效果看上去也是对的，但事实并不是如此简单。我们分别用模拟器打印了下[UIScreen main
Screen]的size,发现6plus的大小是{414, 736}}，6的是{375, 667}}，5的是{320, 568}，这说明它们的frame它们的frame并不是等大的－－当然这一点我们一直有数。不过我们对比了下它们的宽高比，这三个屏又是一致的。</p>

<p>那意味在一要求不高的情况下，我们确实也可用一套设计图来修三套图片出来，模糊也不会很明显，当然这必然不能用<code>UIViewContentModeCenter</code>来填充了，如果有更精细的要求，以5s的分辨率<code>640X1136</code>为例，<code>6</code>是与它的宽比是<code>1.172</code>倍，<code>6p</code>则是它的<code>1.294</code>倍。那么我们可以计算<code>6P</code>的<code>切图分辨率</code>是<code>1242X2208</code>，而设备实际分辨率是<code>1920X1080</code>。</p>

<p>到这里我们似乎可以得出以下结果： </p>

<ol>
<li>在要求不高的情况下，我们可以粗以2x的1.5倍切3x图片，并且采用放大填充模式。</li>
<li>如果按方式1切图，并采用原图模式或者frame大小不变，6,6p上的控件将显得比设计图上小一圈。</li>
<li>对需要用到center模式的图frame变化的区域填充，按照计算出来的分辨率分别切图。</li>
</ol>

<p>但事情远不止这些，我们的现在都广泛使用了<code>AutoLayout</code>来进行适配，很多时候我们控制的间距可能没有变化，这导致我们的frame的宽高并不是严格等比变化的，甚至有时候我们限制高，但宽是自适应的，或者限制了宽，高是自适应的，这时候切图又要重新计算了。为了让我们自己少做点工作，我们可以通过<code>AutoLayout</code>的<code>Aspect Ratio</code>来锁死控件的<code>宽高比</code>。</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "适配6Plus.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
