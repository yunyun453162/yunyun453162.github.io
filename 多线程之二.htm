<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
##原理简介
RunLoop是IOS开发中较为底层的一个概念，我们通常情况下都用不到，顾名思义，它就是一个运行在线程中的循环。它和我们以前见过状态机很类似。

    do{
    
        //触摸事件
        //接收输入
        //任务队列
        //定时器
       //个人的输入源
        ....
       sleep(xx);
         
    }while(condition)

我们app的主线程有就一个类似的循环,当condition不满足时，它就一直在运行或等待中。RunLoop就是一个管理这种类似状态机的对象，让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒并执行任务，直到线程loop终止或线程退出。比较坑的是它虽然支持许多种事件，但是每次只是选择性执行，这就带来了模式（工作状态）切换问题。

##工作模式
<table class="graybox" border="0" cellspacing="0" cellpadding="5"><caption class="tablecaption"><strong class="caption_number">Table 3-1</strong>&nbsp;&nbsp;Predefined run loop modes</caption><tbody><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Mode</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Name</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Description</p></th></tr><tr><td scope="row"><p>Default</p></td><td><p><code><a href="../../../Reference/Foundation/Classes/NSRunLoop_Class/index.html#//apple_ref/c/data/NSDefaultRunLoopMode" data-renderer-version="1" target="_self">NSDefaultRunLoopMode</a></code> (Cocoa)</p><p><code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/data/kCFRunLoopDefaultMode" data-renderer-version="1" target="_self">kCFRunLoopDefaultMode</a></code> (Core Foundation)</p></td><td><p>The default mode is the one used for most operations. Most of the time, you should use this mode to start your run loop and configure your input sources. </p></td></tr><tr><td scope="row"><p>Connection</p></td><td><p><code><!--a target="_self" -->NSConnectionReplyMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode in conjunction with <code><!--a target="_self" -->NSConnection<!--/a--></code> objects to monitor replies. You should rarely need to use this mode yourself.</p></td></tr><tr><td scope="row"><p>Modal</p></td><td><p><code><!--a target="_self" -->NSModalPanelRunLoopMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode to identify events intended for modal panels. </p></td></tr><tr><td scope="row"><p>Event tracking</p></td><td><p><code><!--a target="_self" -->NSEventTrackingRunLoopMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode to restrict incoming events during mouse-dragging loops and other sorts of user interface tracking loops. </p></td></tr><tr><td scope="row"><p>Common modes</p></td><td><p><code><a href="../../../Reference/Foundation/Classes/NSRunLoop_Class/index.html#//apple_ref/c/data/NSRunLoopCommonModes" data-renderer-version="1" target="_self">NSRunLoopCommonModes</a></code> (Cocoa)</p><p><code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/data/kCFRunLoopCommonModes" data-renderer-version="1" target="_self">kCFRunLoopCommonModes</a></code> (Core Foundation)</p></td><td><p>This is a configurable group of commonly used modes. Associating an input source with this mode also associates it with each of the modes in the group. For Cocoa applications, this set includes the default, modal, and event tracking modes by default. Core Foundation includes just the default mode initially. You can add custom modes to the set using the <code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/func/CFRunLoopAddCommonMode" data-renderer-version="1" target="_self">CFRunLoopAddCommonMode</a></code> function.</p></td></tr></tbody></table>


##处理顺序  

    Each time you run it, your thread’s run loop processes pending events and generates notifications for any attached observers. The order in which it does this is very specific and is as follows:

   - Notify observers that the run loop has been entered.
   - Notify observers that any ready timers are about to fire.
   -Notify observers that any input sources that are not port based are about to fire.
   - Fire any non-port-based input sources that are ready to fire.
   - If a port-based input source is ready and waiting to fire, process the event immediately. Go to step 9.
   - Notify observers that the thread is about to sleep.
   - Put the thread to sleep until one of the following events occurs:
   - An event arrives for a port-based input source.
   - A timer fires.
   - The timeout value set for the run loop expires.
   - The run loop is explicitly woken up.
   - Notify observers that the thread just woke up.
   - Process the pending event.
   - If a user-defined timer fired, process the timer event and restart the loop. Go to step 2.
   - If an input source fired, deliver the event.
   - If the run loop was explicitly woken up but has not yet timed out, restart the loop. Go to step 2.
   - Notify observers that the run loop has exited.

##使用
线程创建和销毁都是要消耗系统资源的，在通常情况下我们可以不考虑这个，但是在长时间并发或高并发的情况下就不能不考虑了性能问题了，这就有了线程池的概念。而为了复用线程，我们就需要线程在执行完一个任务后不马上退出，而是休眠等待下一个任务到来，这里RunLoop就有了用武之地。

OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。  
CFRunLoopRef 的代码是开源的，你可以在这里 [http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz](http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz) 下载到整个 CoreFoundation 的源码。  
而关于RunLoop更深入的分析，请看这里：[深入理解RunLoop](http://www.cocoachina.com/ios/20150601/11970.html)

IOS线程默认是没有RunLoop的，一个线程一次只能执行一个任务，执行完成后线程就会退出。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：CFRunLoopGetMain() 和 CFRunLoopGetCurrent()，其实就是在这里系统创建了一个然后用字典存起来了。  为什么这样子做？可能是为了减少不必要的代码，因为runloop需要监听各种的输入，而这些开发者可以通过设置运行模式来达到，隐藏了一些复杂度，我们也不需要去手动维护它们，降低了开发工作量。
为一个线程加入RunLoop:  

    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
    //[runLoop addPort:[NSPort port] forMode:NSDefaultRunLoopMode];
    [runLoop run];



###附：我拷贝过来了[深入理解RunLoop](http://www.cocoachina.com/ios/20150601/11970.html)作者整理好的内部原理概要代码：

    /// 用DefaultMode启动
    void CFRunLoopRun(void) {
        CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
    }

    /// 用指定的Mode启动，允许设置RunLoop超时时间
    int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {
        return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
    }

    /// RunLoop的实现
    int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {
        
        /// 首先根据modeName找到对应mode
        CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);
        /// 如果mode里没有source/timer/observer, 直接返回。
        if (__CFRunLoopModeIsEmpty(currentMode)) return;
        
        /// 1. 通知 Observers: RunLoop 即将进入 loop。
        __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);
        
        /// 内部函数，进入loop
        __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {
            
            Boolean sourceHandledThisLoop = NO;
            int retVal = 0;
            do {
                
                /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。
                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);
                /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。
                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);
                /// 执行被加入的block
                __CFRunLoopDoBlocks(runloop, currentMode);
                
                /// 4. RunLoop 触发 Source0 (非port) 回调。
                sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);
                /// 执行被加入的block
                __CFRunLoopDoBlocks(runloop, currentMode);
                
                /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。
                if (__Source0DidDispatchPortLastTime) {
                    Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &msg)
                    if (hasMsg) goto handle_msg;
                }
                
                /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。
                if (!sourceHandledThisLoop) {
                    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);
                }
                
                /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。
                /// ? 一个基于 port 的Source 的事件。
                /// ? 一个 Timer 到时间了
                /// ? RunLoop 自身的超时时间到了
                /// ? 被其他什么调用者手动唤醒
                __CFRunLoopServiceMachPort(waitSet, &msg, sizeof(msg_buffer), &livePort) {
                    mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg
                }
                
                /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。
                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);
                
                /// 收到消息，处理消息。
            handle_msg:
                
                /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。
                if (msg_is_timer) {
                    __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())
                }
                
                /// 9.2 如果有dispatch到main_queue的block，执行block。
                else if (msg_is_dispatch) {
                    __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
                }
                
                /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件
                else {
                    CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);
                    sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);
                    if (sourceHandledThisLoop) {
                        mach_msg(reply, MACH_SEND_MSG, reply);
                    }
                }
                
                /// 执行加入到Loop的block
                __CFRunLoopDoBlocks(runloop, currentMode);
                
                
                if (sourceHandledThisLoop && stopAfterHandle) {
                    /// 进入loop时参数说处理完事件就返回。
                    retVal = kCFRunLoopRunHandledSource;
                } else if (timeout) {
                    /// 超出传入参数标记的超时时间了
                    retVal = kCFRunLoopRunTimedOut;
                } else if (__CFRunLoopIsStopped(runloop)) {
                    /// 被外部调用者强制停止了
                    retVal = kCFRunLoopRunStopped;
                } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {
                    /// source/timer/observer一个都没有了
                    retVal = kCFRunLoopRunFinished;
                }
                
                /// 如果没超时，mode里没空，loop也没被停止，那继续loop。
            } while (retVal == 0);
        }
        
        /// 10. 通知 Observers: RunLoop 即将退出。
        __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
    }


总结：  
RunLoop就是一个条件循环，当循环条件满足的时候，你可以用它来接收各种输入和消息，同时也为autorelease创造了条件。所有loop循环都需要手动加入一个AutoReleasepool,一个循环完毕自动释放。我还可以用监听者模式在循环里面监听我们相要的输入。它可以工作在单一模式下，也可以是多种模式并存，这取决于你的设置或系统的默认设置。

推荐文章:  
[官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW3);  
[深入理解RunLoop](http://www.cocoachina.com/ios/20150601/11970.html);  
[iOS并发编程（Concurrency Programming）系列之一：Run Loop](http://oncenote.com/2015/03/22/Threading-Run-Loop/);  
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h2 id="">原理简介</h2>

<p>RunLoop是IOS开发中较为底层的一个概念，我们通常情况下都用不到，顾名思义，它就是一个运行在线程中的循环。它和我们以前见过状态机很类似。</p>

<pre><code>do{

    //触摸事件
    //接收输入
    //任务队列
    //定时器
   //个人的输入源
    ....
   sleep(xx);

}while(condition)
</code></pre>

<p>我们app的主线程有就一个类似的循环,当condition不满足时，它就一直在运行或等待中。RunLoop就是一个管理这种类似状态机的对象，让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒并执行任务，直到线程loop终止或线程退出。比较坑的是它虽然支持许多种事件，但是每次只是选择性执行，这就带来了模式（工作状态）切换问题。</p>

<h2 id="">工作模式</h2>

<table class="graybox" border="0" cellspacing="0" cellpadding="5"><caption class="tablecaption"><strong class="caption_number">Table 3-1</strong>&nbsp;&nbsp;Predefined run loop modes</caption><tbody><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Mode</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Name</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Description</p></th></tr><tr><td scope="row"><p>Default</p></td><td><p><code><a href="../../../Reference/Foundation/Classes/NSRunLoop_Class/index.html#//apple_ref/c/data/NSDefaultRunLoopMode" data-renderer-version="1" target="_self">NSDefaultRunLoopMode</a></code> (Cocoa)</p><p><code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/data/kCFRunLoopDefaultMode" data-renderer-version="1" target="_self">kCFRunLoopDefaultMode</a></code> (Core Foundation)</p></td><td><p>The default mode is the one used for most operations. Most of the time, you should use this mode to start your run loop and configure your input sources. </p></td></tr><tr><td scope="row"><p>Connection</p></td><td><p><code><!--a target="_self" -->NSConnectionReplyMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode in conjunction with <code><!--a target="_self" -->NSConnection<!--/a--></code> objects to monitor replies. You should rarely need to use this mode yourself.</p></td></tr><tr><td scope="row"><p>Modal</p></td><td><p><code><!--a target="_self" -->NSModalPanelRunLoopMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode to identify events intended for modal panels. </p></td></tr><tr><td scope="row"><p>Event tracking</p></td><td><p><code><!--a target="_self" -->NSEventTrackingRunLoopMode<!--/a--></code> (Cocoa)</p></td><td><p>Cocoa uses this mode to restrict incoming events during mouse-dragging loops and other sorts of user interface tracking loops. </p></td></tr><tr><td scope="row"><p>Common modes</p></td><td><p><code><a href="../../../Reference/Foundation/Classes/NSRunLoop_Class/index.html#//apple_ref/c/data/NSRunLoopCommonModes" data-renderer-version="1" target="_self">NSRunLoopCommonModes</a></code> (Cocoa)</p><p><code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/data/kCFRunLoopCommonModes" data-renderer-version="1" target="_self">kCFRunLoopCommonModes</a></code> (Core Foundation)</p></td><td><p>This is a configurable group of commonly used modes. Associating an input source with this mode also associates it with each of the modes in the group. For Cocoa applications, this set includes the default, modal, and event tracking modes by default. Core Foundation includes just the default mode initially. You can add custom modes to the set using the <code><a href="../../../../CoreFoundation/Reference/CFRunLoopRef/index.html#//apple_ref/c/func/CFRunLoopAddCommonMode" data-renderer-version="1" target="_self">CFRunLoopAddCommonMode</a></code> function.</p></td></tr></tbody></table>

<h2 id="">处理顺序</h2>

<pre><code>Each time you run it, your thread’s run loop processes pending events and generates notifications for any attached observers. The order in which it does this is very specific and is as follows:
</code></pre>

<ul>
<li>Notify observers that the run loop has been entered.</li>
<li>Notify observers that any ready timers are about to fire.
-Notify observers that any input sources that are not port based are about to fire.</li>
<li>Fire any non-port-based input sources that are ready to fire.</li>
<li>If a port-based input source is ready and waiting to fire, process the event immediately. Go to step 9.</li>
<li>Notify observers that the thread is about to sleep.</li>
<li>Put the thread to sleep until one of the following events occurs:</li>
<li>An event arrives for a port-based input source.</li>
<li>A timer fires.</li>
<li>The timeout value set for the run loop expires.</li>
<li>The run loop is explicitly woken up.</li>
<li>Notify observers that the thread just woke up.</li>
<li>Process the pending event.</li>
<li>If a user-defined timer fired, process the timer event and restart the loop. Go to step 2.</li>
<li>If an input source fired, deliver the event.</li>
<li>If the run loop was explicitly woken up but has not yet timed out, restart the loop. Go to step 2.</li>
<li>Notify observers that the run loop has exited.</li>
</ul>

<h2 id="">使用</h2>

<p>线程创建和销毁都是要消耗系统资源的，在通常情况下我们可以不考虑这个，但是在长时间并发或高并发的情况下就不能不考虑了性能问题了，这就有了线程池的概念。而为了复用线程，我们就需要线程在执行完一个任务后不马上退出，而是休眠等待下一个任务到来，这里RunLoop就有了用武之地。</p>

<p>OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。 <br>
CFRunLoopRef 的代码是开源的，你可以在这里 <a href="http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz">http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz</a> 下载到整个 CoreFoundation 的源码。 <br>
而关于RunLoop更深入的分析，请看这里：<a href="http://www.cocoachina.com/ios/20150601/11970.html">深入理解RunLoop</a></p>

<p>IOS线程默认是没有RunLoop的，一个线程一次只能执行一个任务，执行完成后线程就会退出。苹果不允许直接创建 RunLoop，它只提供了两个自动获取的函数：CFRunLoopGetMain() 和 CFRunLoopGetCurrent()，其实就是在这里系统创建了一个然后用字典存起来了。  为什么这样子做？可能是为了减少不必要的代码，因为runloop需要监听各种的输入，而这些开发者可以通过设置运行模式来达到，隐藏了一些复杂度，我们也不需要去手动维护它们，降低了开发工作量。
为一个线程加入RunLoop:  </p>

<pre><code>NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
//[runLoop addPort:[NSPort port] forMode:NSDefaultRunLoopMode];
[runLoop run];
</code></pre>

<h3 id="runloophttpwwwcocoachinacomios2015060111970html">附：我拷贝过来了<a href="http://www.cocoachina.com/ios/20150601/11970.html">深入理解RunLoop</a>作者整理好的内部原理概要代码：</h3>

<pre><code>/// 用DefaultMode启动
void CFRunLoopRun(void) {
    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
}

/// 用指定的Mode启动，允许设置RunLoop超时时间
int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {
    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
}

/// RunLoop的实现
int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {

    /// 首先根据modeName找到对应mode
    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);
    /// 如果mode里没有source/timer/observer, 直接返回。
    if (__CFRunLoopModeIsEmpty(currentMode)) return;

    /// 1. 通知 Observers: RunLoop 即将进入 loop。
    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);

    /// 内部函数，进入loop
    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {

        Boolean sourceHandledThisLoop = NO;
        int retVal = 0;
        do {

            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);
            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);
            /// 执行被加入的block
            __CFRunLoopDoBlocks(runloop, currentMode);

            /// 4. RunLoop 触发 Source0 (非port) 回调。
            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);
            /// 执行被加入的block
            __CFRunLoopDoBlocks(runloop, currentMode);

            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。
            if (__Source0DidDispatchPortLastTime) {
                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)
                if (hasMsg) goto handle_msg;
            }

            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。
            if (!sourceHandledThisLoop) {
                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);
            }

            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。
            /// ? 一个基于 port 的Source 的事件。
            /// ? 一个 Timer 到时间了
            /// ? RunLoop 自身的超时时间到了
            /// ? 被其他什么调用者手动唤醒
            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) {
                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg
            }

            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);

            /// 收到消息，处理消息。
        handle_msg:

            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。
            if (msg_is_timer) {
                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())
            }

            /// 9.2 如果有dispatch到main_queue的block，执行block。
            else if (msg_is_dispatch) {
                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
            }

            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件
            else {
                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);
                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);
                if (sourceHandledThisLoop) {
                    mach_msg(reply, MACH_SEND_MSG, reply);
                }
            }

            /// 执行加入到Loop的block
            __CFRunLoopDoBlocks(runloop, currentMode);


            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) {
                /// 进入loop时参数说处理完事件就返回。
                retVal = kCFRunLoopRunHandledSource;
            } else if (timeout) {
                /// 超出传入参数标记的超时时间了
                retVal = kCFRunLoopRunTimedOut;
            } else if (__CFRunLoopIsStopped(runloop)) {
                /// 被外部调用者强制停止了
                retVal = kCFRunLoopRunStopped;
            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {
                /// source/timer/observer一个都没有了
                retVal = kCFRunLoopRunFinished;
            }

            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。
        } while (retVal == 0);
    }

    /// 10. 通知 Observers: RunLoop 即将退出。
    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
}
</code></pre>

<p>总结： <br>
RunLoop就是一个条件循环，当循环条件满足的时候，你可以用它来接收各种输入和消息，同时也为autorelease创造了条件。所有loop循环都需要手动加入一个AutoReleasepool,一个循环完毕自动释放。我还可以用监听者模式在循环里面监听我们相要的输入。它可以工作在单一模式下，也可以是多种模式并存，这取决于你的设置或系统的默认设置。</p>

<p>推荐文章: <br>
<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW3">官方文档</a>; <br>
<a href="http://www.cocoachina.com/ios/20150601/11970.html">深入理解RunLoop</a>; <br>
<a href="http://oncenote.com/2015/03/22/Threading-Run-Loop/">iOS并发编程（Concurrency Programming）系列之一：Run Loop</a>;  </p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "多线程之二.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
