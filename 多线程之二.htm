<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
RunLoop是IOS开发中较为底层的一个概念，我们通常情况下都用不到，顾名思义，它就是一个运行在线程中的循环。它和我们以前见过状态机很类似。

    while(1){
    
        //接收事件
        //接收输入
        //处理事件
        ....
       sleep(1);
       if(condition)
           break;    
    }

我们app的主线程有就一个类似的循环,当condition不满足时，它就一直在运行或等待中。RunLoop就是一个管理这个状态机的对象，让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒并执行任务，直到线程loop终止或线程退出。


线程创建和销毁都是要消耗系统资源的，在通常情况下我们可以不考虑这个，但是在高并发的情况下就不能不考虑了性能问题了，这就有了线程池的概念。而为了复用线程，我们就需要线程在执行完一个任务后不马上退出，而是休眠等待下一个任务到来，这里RunLoop就有了用武之地。

OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。
CFRunLoopRef 的代码是开源的，你可以在这里 http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz 下载到整个 CoreFoundation 的源码

<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>RunLoop是IOS开发中较为底层的一个概念，我们通常情况下都用不到，顾名思义，它就是一个运行在线程中的循环。它和我们以前见过状态机很类似。</p>

<pre><code>while(1){

    //接收事件
    //接收输入
    //处理事件
    ....
   sleep(1);
   if(condition)
       break;    
}
</code></pre>

<p>我们app的主线程有就一个类似的循环,当condition不满足时，它就一直在运行或等待中。RunLoop就是一个管理这个状态机的对象，让线程在没有处理消息时休眠以避免资源占用、在有消息到来时立刻被唤醒并执行任务，直到线程loop终止或线程退出。</p>

<p>线程创建和销毁都是要消耗系统资源的，在通常情况下我们可以不考虑这个，但是在高并发的情况下就不能不考虑了性能问题了，这就有了线程池的概念。而为了复用线程，我们就需要线程在执行完一个任务后不马上退出，而是休眠等待下一个任务到来，这里RunLoop就有了用武之地。</p>

<p>OSX/iOS 系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。
CFRunLoopRef 的代码是开源的，你可以在这里 http://opensource.apple.com/tarballs/CF/CF-855.17.tar.gz 下载到整个 CoreFoundation 的源码</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2015 by Kobe, Designed by Kobe</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "多线程之二.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
